From 15af3e8216c38204c9b84a2be8553d042f7f6989 Mon Sep 17 00:00:00 2001
From: Brad Geltz <brad.geltz@intel.com>
Date: Wed, 5 Aug 2020 13:33:08 -0700
Subject: [PATCH 1/8] Fix whitespace issues
#
#  Copyright (c) 2015 - 2021, Intel Corporation
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#      * Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#
#      * Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in
#        the documentation and/or other materials provided with the
#        distribution.
#
#      * Neither the name of Intel Corporation nor the names of its
#        contributors may be used to endorse or promote products derived
#        from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

Signed-off-by: Brad Geltz <brad.geltz@intel.com>
---
 src/cg.f                    |  8 +++---
 src/comm_mpi.f              | 56 ++++++++++++++++++-------------------
 src/driver.f                | 50 ++++++++++++++++-----------------
 test/example1/makenek-intel |  6 ++--
 4 files changed, 60 insertions(+), 60 deletions(-)

diff --git a/src/cg.f b/src/cg.f
index b4214dd..f9c4f6d 100644
--- a/src/cg.f
+++ b/src/cg.f
@@ -30,9 +30,9 @@ c     Input:   c - inverse of the counting matrix
 c
 c     Work arrays:   r,w,p,z  - vectors of length n
 c
-c     User-provided ax(w,z,n) returns  w := Az,  
+c     User-provided ax(w,z,n) returns  w := Az,
 c
-c     User-provided solveM(z,r,n) ) returns  z := M^-1 r,  
+c     User-provided solveM(z,r,n) ) returns  z := M^-1 r,
 c
       parameter (lt=lx1*ly1*lz1*lelt)
 c     real ur(lt),us(lt),ut(lt)
@@ -227,8 +227,8 @@ c-------------------------------------------------------------------------
       include 'SIZE'
       real w(n),u(n)
       real h2i
-  
-      h2i = (n+1)*(n+1)  
+
+      h2i = (n+1)*(n+1)
       do i = 2,n-1
          w(i)=h2i*(2*u(i)-u(i-1)-u(i+1))
       enddo
diff --git a/src/comm_mpi.f b/src/comm_mpi.f
index 26f1bc0..11df316 100644
--- a/src/comm_mpi.f
+++ b/src/comm_mpi.f
@@ -13,7 +13,7 @@ c-----------------------------------------------------------------------
       if ( mpi_is_initialized .eq. 0 ) then
 #ifdef MPITHREADS
         call mpi_init_thread (MPI_THREAD_MULTIPLE,provided,ierr)
-#else 
+#else
         call mpi_init (ierr)
 #endif
       endif
@@ -33,11 +33,11 @@ c        call exitt
       endif
 
       IF (NP.GT.LP) THEN
-         WRITE(6,*) 
+         WRITE(6,*)
      $   'ERROR: Code compiled for a max of',LP,' processors.'
-         WRITE(6,*) 
+         WRITE(6,*)
      $   'Recompile with LP =',NP,' or run with fewer processors.'
-         WRITE(6,*) 
+         WRITE(6,*)
      $   'Aborting in routine INIPROC.'
          call exitt
       endif
@@ -49,7 +49,7 @@ c        call exitt
       if (oneeps.ne.1.0) then
          wdsize=8
       else
-         if(nid.eq.0) 
+         if(nid.eq.0)
      &     write(6,*) 'ABORT: single precision mode not supported!'
          call exitt
       endif
@@ -74,7 +74,7 @@ c
       NODE0=0
       NODE= NID+1
 
-      if (nid.eq.0) then 
+      if (nid.eq.0) then
          write(6,*) 'Number of processors:',np
          WRITE(6,*) 'REAL    wdsize      :',WDSIZE
          WRITE(6,*) 'INTEGER wdsize      :',ISIZE
@@ -203,7 +203,7 @@ C
       call mpi_recv (buf,len,mpi_byte
      $              ,jnid,mtype,nekcomm,status,ierr)
 c
-      if (len.gt.lenm) then 
+      if (len.gt.lenm) then
           write(6,*) nid,'long message in mpi_crecv:',len,lenm
           call exitt
       endif
@@ -224,7 +224,7 @@ C
      $            ,jnid,mtype,nekcomm,status,ierr)
       call mpi_get_count (status,mpi_byte,len,ierr)
 c
-      if (len.gt.lenm) then 
+      if (len.gt.lenm) then
           write(6,*) nid,'long message in mpi_crecv:',len,lenm
           call exitt
       endif
@@ -266,7 +266,7 @@ c-----------------------------------------------------------------------
       double precision fclock_gettime
       external fclock_gettime
       dnekclock = fclock_gettime()
-#else 
+#else
       integer*8 countval, countrate, countmax
       double precision countd
       call system_clock(countval, countrate, countmax)
@@ -443,7 +443,7 @@ c-----------------------------------------------------------------------
       include 'TOTAL'
 
       ierr = iglsum(ierr,1)
-      if(ierr.eq.0) return 
+      if(ierr.eq.0) return
 
       len = indx1(string,'$',1)
       call blank(ostring,132)
@@ -504,7 +504,7 @@ c
       ttotal = tstop-etimes
       nxyz   = nx1*ny1*nz1
 
-      if (nid.eq.0) then 
+      if (nid.eq.0) then
          dtmp1 = 0
          dtmp2 = 0
          dtmp3 = 0
@@ -514,23 +514,23 @@ c
            dtmp1 = np*ttime/(dgp*max(istep,1))
            dtmp2 = ttime/max(istep,1)
            dtmp3 = 1.*papi_flops/1e6
-         endif 
+         endif
          write(6,*) ' '
          write(6,'(A)') 'call exitt: dying ...'
          write(6,*) ' '
 c        call print_stack()
          write(6,*) ' '
-         write(6,'(4(A,1p1e13.5,A,/))') 
+         write(6,'(4(A,1p1e13.5,A,/))')
      &       'total elapsed time             : ',ttotal, ' sec'
      &      ,'total solver time incl. I/O    : ',ttime , ' sec'
      &      ,'time/timestep                  : ',dtmp2 , ' sec'
      &      ,'CPU seconds/timestep/gridpt    : ',dtmp1 , ' sec'
 #ifdef PAPI
-         write(6,'(2(A,1g13.5,/))') 
+         write(6,'(2(A,1g13.5,/))')
      &       'Gflops                         : ',dtmp3/1000.
      &      ,'Gflops/s                       : ',papi_mflops/1000.
 #endif
-      endif 
+      endif
 
       nz1 = 1/(nx1-ny1)
 
@@ -644,7 +644,7 @@ c-----------------------------------------------------------------------
          nloop = max(nloop,1)
 
          len   = 8*nwds
-     
+
          call ping_loop(t1,t0,len,nloop,nodea,nodeb,nid,x,y,x,y)
 
          if (nid.eq.nodea) then
@@ -792,7 +792,7 @@ c-----------------------------------------------------------------------
 
       nwds  = min(1000,lt)
       nloop = 50
- 
+
       tmsg = 0.
       call gop(tmsg,t1,'+  ',1)
 
@@ -890,7 +890,7 @@ c-----------------------------------------------------------------------
       if (nid.eq.0) then
          nwds = 1
          do itest=1,500
-            if (ivb.gt.0.or.itest.eq.1) 
+            if (ivb.gt.0.or.itest.eq.1)
      $         write(6,1) np,nwds,(times(k,itest),k=1,2)
     1       format(i9,i12,1p2e16.8,' gop')
             nwds = (nwds+1)*1.016
@@ -943,7 +943,7 @@ c-----------------------------------------------------------------------
       if (nid.eq.0) then
          nwds = 1
          do itest=1,500
-            if (ivb.gt.0.or.itest.eq.1) 
+            if (ivb.gt.0.or.itest.eq.1)
      $         write(6,1) np,nwds,(times(k,itest),k=1,2)
     1       format(i9,i12,1p2e16.8,' gp2')
             nwds = (nwds+1)*1.016
@@ -992,7 +992,7 @@ c     Std. fan-in/fan-out
       real x(n), w(n)
       character*3 op
 
-      integer bit, bytes, cnt, diff, spsize, i, 
+      integer bit, bytes, cnt, diff, spsize, i,
      *   parent, troot, xor, root, lnp, log2
       logical ifgot
 
@@ -1168,17 +1168,17 @@ c     Double Buffer : does 2*nloop timings
 
       itag=1
       if (nid.eq.nodea) then
-         call mpi_irecv(y1,len,mpi_byte,nodeb,itag,nekcomm,msg1,ierr)   ! 1b 
+         call mpi_irecv(y1,len,mpi_byte,nodeb,itag,nekcomm,msg1,ierr)   ! 1b
          call nekgsync
 
 
          t0 = mpi_wtime ()
          do i=1,nloop
-            call mpi_send (x1,len,mpi_byte,nodeb,itag,nekcomm,ierr)     ! 1a 
-            call mpi_irecv(y2,len,mpi_byte,nodeb,itag,nekcomm,msg2,ierr)! 2b 
+            call mpi_send (x1,len,mpi_byte,nodeb,itag,nekcomm,ierr)     ! 1a
+            call mpi_irecv(y2,len,mpi_byte,nodeb,itag,nekcomm,msg2,ierr)! 2b
             call mpi_wait (msg1,status,ierr)                            ! 1b
-            call mpi_send (x2,len,mpi_byte,nodeb,itag,nekcomm,ierr)     ! 2a 
-            call mpi_irecv(y1,len,mpi_byte,nodeb,itag,nekcomm,msg1,ierr)! 3b 
+            call mpi_send (x2,len,mpi_byte,nodeb,itag,nekcomm,ierr)     ! 2a
+            call mpi_irecv(y1,len,mpi_byte,nodeb,itag,nekcomm,msg1,ierr)! 3b
             call mpi_wait (msg2,status,ierr)                            ! 2b
          enddo
          t1 = mpi_wtime ()
@@ -1187,7 +1187,7 @@ c     Double Buffer : does 2*nloop timings
 
       elseif (nid.eq.nodeb) then
 
-         call mpi_irecv(y1,len,mpi_byte,nodea,itag,nekcomm,msg1,ierr)   ! nb 
+         call mpi_irecv(y1,len,mpi_byte,nodea,itag,nekcomm,msg1,ierr)   ! nb
          call nekgsync
 
 
@@ -1195,11 +1195,11 @@ c     Double Buffer : does 2*nloop timings
             call mpi_wait (msg1,status,ierr)                            ! 1a
             call mpi_send (x1,len,mpi_byte,nodea,itag,nekcomm,ierr)     ! 1b
             call mpi_irecv(y2,len,mpi_byte,nodea,itag,nekcomm,msg2,ierr)! 2a
-            call mpi_wait (msg2,status,ierr)                            ! 2a 
+            call mpi_wait (msg2,status,ierr)                            ! 2a
             call mpi_send (x2,len,mpi_byte,nodea,itag,nekcomm,ierr)     ! 2b
             call mpi_irecv(y1,len,mpi_byte,nodea,itag,nekcomm,msg1,ierr)! 3a
          enddo
-         call mpi_wait (msg1,status,ierr)                            ! 2a 
+         call mpi_wait (msg1,status,ierr)                            ! 2a
          call mpi_send (x1,len,mpi_byte,nodea,itag,nekcomm,ierr)        ! nb
 
       else
diff --git a/src/driver.f b/src/driver.f
index f45aa50..cb4421f 100644
--- a/src/driver.f
+++ b/src/driver.f
@@ -1,6 +1,6 @@
 c-----------------------------------------------------------------------
       program nekbone
-      
+
       include 'SIZE'
       include 'TOTAL'
       include 'mpif.h'
@@ -10,7 +10,7 @@ c-----------------------------------------------------------------------
 
       real ah(lx1*lx1),bh(lx1),ch(lx1*lx1),dh(lx1*lx1)
      $    ,zpts(2*lx1),wght(2*lx1)
-      
+
       real x(lt),f(lt),r(lt),w(lt),p(lt),z(lt),c(lt)
       real g(6,lt)
       real mfloplist(1024), avmflop
@@ -32,7 +32,7 @@ c-----------------------------------------------------------------------
       numthreads = 1
 #ifdef _OPENMP
       numthreads= omp_get_max_threads()
-#endif 
+#endif
 
       if (nid.eq.0) then
         write(*,*) "Max number of threads: ", numthreads
@@ -44,7 +44,7 @@ c     call platform_timer(iverbose)   ! iverbose=0 or 1
 
       icount = 0
 
-#ifndef NITER 
+#ifndef NITER
 #define NITER 100
 #endif
       niter = NITER
@@ -54,9 +54,9 @@ c     call platform_timer(iverbose)   ! iverbose=0 or 1
       end if
 
 #ifdef LOG
-#define WLOG(X) if (nid .eq. 0) write(*,*) X 
-#else 
-#define WLOG(X) 
+#define WLOG(X) if (nid .eq. 0) write(*,*) X
+#else
+#define WLOG(X)
 #endif
 
 c     SET UP and RUN NEKBONE
@@ -72,7 +72,7 @@ c     SET UP and RUN NEKBONE
            call set_multiplicity (c)       ! Inverse of counting matrix
 
            WLOG("calling proxy_setup")
-           call proxy_setup(ah,bh,ch,dh,zpts,wght,g) 
+           call proxy_setup(ah,bh,ch,dh,zpts,wght,g)
 
            n     = nx1*ny1*nz1*nelt
 
@@ -152,10 +152,10 @@ C     Transfer array dimensions to common
 
       include 'SIZE'
       include 'INPUT'
- 
+
       ny1=nx1
       nz1=nx1
- 
+
       ndim=ldim
 
       return
@@ -166,34 +166,34 @@ c-----------------------------------------------------------------------
       include 'TOTAL'
       logical ifbrick
       integer e,eg,offs
- 
+
 
       if(.not.ifbrick) then   ! A 1-D array of elements of length P*lelt
   10     continue
          nelx = nelt*np
          nely = 1
          nelz = 1
-   
+
          do e=1,nelt
             eg = e + nid*nelt
             lglel(e) = eg
          enddo
-      else              ! A 3-D block of elements 
+      else              ! A 3-D block of elements
         if (npx*npy*npz .ne. np) then
           call cubic(npx,npy,npz,np)  !xyz distribution of total proc
-        end if 
+        end if
         if (mx*my*mz .ne. nelt) then
           call cubic(mx,my,mz,nelt)   !xyz distribution of elements per proc
-        end if 
-      
+        end if
+
 c       if(mx.eq.nelt) goto 10
 
         nelx = mx*npx
-        nely = my*npy 
+        nely = my*npy
         nelz = mz*npz
 
         e = 1
-        offs = (mod(nid,npx)*mx) + npx*(my*mx)*(mod(nid/npx,npy)) 
+        offs = (mod(nid,npx)*mx) + npx*(my*mx)*(mod(nid/npx,npy))
      $      + (npx*npy)*(mx*my*mz)*(nid/(npx*npy))
         do k = 0,mz-1
         do j = 0,my-1
@@ -243,26 +243,26 @@ c-----------------------------------------------------------------------
             it = ix
             ix = iy
             iy = it
-          end if      
+          end if
 
           if (ix < iz) then
             it = ix
             ix = iz
             iz = it
-          end if      
+          end if
 
           if (iy < iz) then
             it = iy
             iy = iz
             iz = it
-          end if      
+          end if
 
           if ( REAL(ix)/iz < ratio) then
             ratio = REAL(ix)/iz
             mx = ix
             my = iy
             mz = iz
-          end if 
+          end if
 
         end if
       enddo
@@ -361,7 +361,7 @@ c-----------------------------------------------------------------------
         do i = 1,20
           tmp1(i) = 0.0
         end do
-        
+
         tmp1(1)= time1
         do i = 1, numThrd
           tmp1(2)= tmp1(2) + trzero(i)
@@ -620,7 +620,7 @@ c----------------------------------------------------------------------
 
       !open .rea
       if(nid.eq.0) then
-         open(unit=9,file='data.rea',status='old') 
+         open(unit=9,file='data.rea',status='old')
          read(9,*,err=100) ifbrick
          read(9,*,err=100) iel0,ielN,ielD
          read(9,*,err=100) nx0,nxN,nxD
@@ -654,7 +654,7 @@ c     nxN=lx1
   200 continue
       write(6,*) "ERROR data.rea :: iel0 > ielN or nx0 > nxN :: ABORT"
       call exitt0
-  
+
       return
       end
 c-----------------------------------------------------------------------
diff --git a/test/example1/makenek-intel b/test/example1/makenek-intel
index 209dfc3..fa6e4f3 100755
--- a/test/example1/makenek-intel
+++ b/test/example1/makenek-intel
@@ -2,7 +2,7 @@
 # Nek5000 build config file
 # (c) 2008,2009,2010 UCHICAGO ARGONNE, LLC
 
-# source path 
+# source path
 SOURCE_ROOT="../../src"
 
 # Fortran compiler
@@ -11,7 +11,7 @@ F77="mpiifort"
 # C compiler
 CC="mpiicc"
 
-# pre-processor symbol list 
+# pre-processor symbol list
 # (set PPLIST=? to get a list of available symbols)
 #PPLSIT="BGQ BGP K10_MXM TIMERS MPITIMER BGQTIMER CGTTIMER NITER=20 LOG MPITHREADS XSMM MXMBASIC MKL BLAS_MXM XSMM_FIXED XSMM_DISPATCH NPOLY=8"
 PPLIST="TIMERS CGTIMERS"
@@ -25,7 +25,7 @@ PPLIST="TIMERS CGTIMERS"
 
 # auxilliary files to compile
 # NOTE: source files have to located in the same directory as makenek
-#       a makefile_usr.inc has to be provided containing the build rules 
+#       a makefile_usr.inc has to be provided containing the build rules
 #USR="foo.o"
 
 # linking flags
-- 
2.23.0


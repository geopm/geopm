From 9c413961d734c573bb280c1c63c1b201aa15cd67 Mon Sep 17 00:00:00 2001
From: Brad Geltz <brad.geltz@intel.com>
Date: Wed, 7 Oct 2020 15:55:14 -0700
Subject: [PATCH 5/6] Add region markup

#
#  Copyright (c) 2015 - 2024 Intel Corporation
#  SPDX-License-Identifier: BSD-3-Clause
#

Signed-off-by: Brad Geltz <brad.geltz@intel.com>
---
 src/SparseMatrix_functions.hpp | 24 ++++++++++++++++++++++++
 src/Vector_functions.hpp       | 24 ++++++++++++++++++++++++
 2 files changed, 48 insertions(+)

diff --git a/src/SparseMatrix_functions.hpp b/src/SparseMatrix_functions.hpp
index 876f4ad..f77ff2c 100644
--- a/src/SparseMatrix_functions.hpp
+++ b/src/SparseMatrix_functions.hpp
@@ -43,6 +43,10 @@
 #include <exchange_externals.hpp>
 #include <mytimer.hpp>
 
+#ifndef NO_GEOPM
+#include "geopm_prof.h"
+#endif
+
 #ifdef MINIFE_HAVE_TBB
 #include <LockingMatrix.hpp>
 #endif
@@ -515,6 +519,13 @@ void operator()(MatrixType& A,
         ScalarType* ycoefs                        = &y.coefs[0];
         const ScalarType beta                     = 0;
 
+#ifndef NO_GEOPM
+        static uint64_t R_ID = 0;
+        if (R_ID == 0) {
+            geopm_prof_region( "PHASE_MATVEC", GEOPM_REGION_HINT_COMPUTE, &R_ID);
+        }
+        geopm_prof_enter( R_ID);
+#endif
         #pragma omp parallel for
         for(MINIFE_GLOBAL_ORDINAL row = 0; row < rows_size; ++row) {
                 const MINIFE_GLOBAL_ORDINAL row_start = Arowoffsets[row];
@@ -529,6 +540,9 @@ void operator()(MatrixType& A,
 
                 ycoefs[row] = sum;
         }
+#ifndef NO_GEOPM
+        geopm_prof_exit(R_ID);
+#endif
 }
 };
 #elif defined(MINIFE_ELL_MATRIX)
@@ -553,6 +567,13 @@ void operator()(MatrixType& A,
         ScalarType* ycoefs = &y.coefs[0];
   ScalarType beta = 0;
 
+#ifndef NO_GEOPM
+  static uint64_t R_ID = 0;
+  if (R_ID == 0) {
+      geopm_prof_region( "PHASE_MATVEC", GEOPM_REGION_HINT_COMPUTE, &R_ID);
+  }
+  geopm_prof_enter( R_ID);
+#endif
   #pragma omp parallel for
   for(int row=0; row<n; ++row) {
     ScalarType sum = beta*ycoefs[row];
@@ -566,6 +587,9 @@ void operator()(MatrixType& A,
 
     ycoefs[row] = sum;
   }
+#ifndef NO_GEOPM
+  geopm_prof_exit(R_ID);
+#endif
 }
 };
 #endif
diff --git a/src/Vector_functions.hpp b/src/Vector_functions.hpp
index cdf9b15..bf5f15f 100644
--- a/src/Vector_functions.hpp
+++ b/src/Vector_functions.hpp
@@ -36,6 +36,10 @@
 #include <mpi.h>
 #endif
 
+#ifndef NO_GEOPM
+#include "geopm_prof.h"
+#endif
+
 #ifdef MINIFE_HAVE_TBB
 #include <LockingVector.hpp>
 #endif
@@ -152,6 +156,13 @@ void
   const ScalarType*  ycoefs = &y.coefs[0];
         ScalarType*  wcoefs = &w.coefs[0];
 
+#ifndef NO_GEOPM
+  static uint64_t R_ID = 0;
+  if (R_ID == 0) {
+    geopm_prof_region( "PHASE_WAXPBY", GEOPM_REGION_HINT_MEMORY, &R_ID);
+  }
+  geopm_prof_enter( R_ID);
+#endif
   if(beta == 0.0) {
 	if(alpha == 1.0) {
   		#pragma omp parallel for
@@ -177,6 +188,9 @@ void
   		}
   	}
   }
+#ifndef NO_GEOPM
+  geopm_prof_exit( R_ID);
+#endif
 
 #ifdef MINIFE_DEBUG_OPENMP
   std::cout << "Finished WAXPBY." << std::endl;
@@ -245,10 +259,20 @@ typename TypeTraits<typename Vector::ScalarType>::magnitude_type
   const Scalar*  ycoefs = &y.coefs[0];
   MINIFE_SCALAR result = 0;
 
+#ifndef NO_GEOPM
+  static uint64_t R_ID = 0;
+  if (R_ID == 0) {
+    geopm_prof_region( "PHASE_DOT", GEOPM_REGION_HINT_MEMORY, &R_ID);
+  }
+  geopm_prof_enter( R_ID);
+#endif
   #pragma omp parallel for reduction(+:result)
   for(int i=0; i<n; ++i) {
     result += xcoefs[i] * ycoefs[i];
   }
+#ifndef NO_GEOPM
+  geopm_prof_exit( R_ID);
+#endif
 
 #ifdef HAVE_MPI
   magnitude local_dot = result, global_dot = 0;
-- 
2.26.2


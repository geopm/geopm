#!/usr/bin/env python3
#
#  Copyright (c) 2015 - 2023, Intel Corporation
#  SPDX-License-Identifier: BSD-3-Clause
#

"""@TEST_NAME@

"""

import sys
import unittest
import os
import glob

import geopmpy.io
import geopmdpy.error

from integration.test import util
if util.do_launch():
    # Note: this import may be moved outside of do_launch if needed to run
    # commands on compute nodes such as geopm_test_launcher.geopmread
    from integration.test import geopm_test_launcher

class AppConf(object):
    """Class that is used by the test launcher in place of a
    geopmpy.io.BenchConf when running the @test_name@ benchmark.

    """
    def write(self):
        """Called by the test launcher prior to executing the test application
        to write any files required by the application.

        """
        pass

    def get_exec_path(self):
        """Path to benchmark filled in by template automatically.

        """
        script_dir = os.path.dirname(os.path.realpath(__file__))
        return os.path.join(script_dir, '.libs', 'test_@test_name@')

    def get_exec_args(self):
        """Returns a list of strings representing the command line arguments
        to pass to the test-application for the next run.  This is
        especially useful for tests that execute the test-application
        multiple times.

        """
        return []


class TestIntegration_@test_name@(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        """Create launcher, execute benchmark and set up class variables.

        """
        sys.stdout.write('(' + os.path.basename(__file__).split('.')[0] +
                         '.' + cls.__name__ + ') ...')
        test_name = '@test_name@'
        cls._report_path = 'test_{}.report'.format(test_name)
        cls._trace_path = 'test_{}.trace'.format(test_name)
        cls._image_path = 'test_{}.png'.format(test_name)
        cls._skip_launch = not util.do_launch()
        cls._agent_conf_path = 'test_' + test_name + '-agent-config.json'
        if not cls._skip_launch:
            # Set the job size parameters
            num_node = 1
            num_rank = 1
            time_limit = 6000
            # Configure the test application
            app_conf = AppConf()
            # Configure the agent
            agent_conf = geopmpy.agent.AgentConf(cls._agent_conf_path)
            # Create the test launcher with the above configuration
            launcher = geopm_test_launcher.TestLauncher(app_conf,
                                                        agent_conf,
                                                        cls._report_path,
                                                        cls._trace_path,
                                                        time_limit=time_limit)
            launcher.set_num_node(num_node)
            launcher.set_num_rank(num_rank)
            # Run the test application
            launcher.run('test_' + test_name)


    def tearDown(self):
        if sys.exc_info() != (None, None, None):
            TestIntegration_@test_name@._keep_files = True

    def test_load_report(self):
        """Test that the report can be loaded

        """
        report = geopmpy.io.RawReport(self._report_path)

if __name__ == '__main__':
    # Call do_launch to clear non-pyunit command line option
    util.do_launch()
    unittest.main()

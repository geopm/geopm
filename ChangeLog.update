* Tue May 22 2018 Christopher M. Cantalupo <christopher.m.cantalupo@intel.com> v0.5.0
- GEOPM beta release!
- New landing page: <https://geopm.github.io>
- Now with slack: <https://geopm.slack.com>.
- New Code of Conduct.
- New pull request template.

- Modified implementations and interfaces:
- Major refactor of the controller and plugin architecture is provided as an optional new code path.
- The old code path is still available for users as long as the controller is run without the GEOPM_AGENT environment variable set.
- The new code path will be active if the user selects an agent by name with the GEOPM_AGENT environment variable when launching the controller.
- The old code path is maintained in the current Controller object along with the the Decider / Platform / PlatformImp plugins.
- The new code path is maintained in a replacement for the Controller which has been temporaraly named the Kontroller.
- The Kontroller will be renamed the Controller after this release, and the old code path will no longer be available.
- The beta release enables a new set of plugin interfaces named the IOGroup, Agent, and Comm.
- It is through the IOGroup, Agent and Comm plugins that the GEOPM runtime can be extended.
- The Decider / Platform / PlatformImp plugin extensions are deprecated and will be removed after this release.
- The IOGroup plugin enables a user to add new signal and control mechanisms for an Agent to read and write.
- The Agent plugin enables a user to add new monitor and control algorithms to the GEOPM runtime.
- MPI use by the GEOPM runtime which is not linked by application has been completely encapsulated in Comm object.
- A tutorial has been extended with two new directories: tutorial/agent and tutorial/iogroup.
- The tutorial/iogroup directory documents how to write an IOGroup plugin.
- The tutorial/agent directory documents how to write an Agent plugin.
- The interface to the resource manager has been made much more flexible for supporting the new Agent interfaces.
- The resource manager interface is documented in the geopm_agent_c(3) and geopm_endpoint_c(3) man pages.
- Additionally command line tools have been implemented/proposed to support the interfaces documented in those man pages.
- The geopm_agent_c APIs and geopmagent CLI has software support.
- The endpoint interfaces are a work in progress that has not yet been integrated into the mainline source.
- The PlatformIO object provides the interface to the IOGroups.
- The PlatformIO C++ object will soon have an associated C interface documented as geopm_platformio_c(3).
- The geopmread and geopmwrite provide a CLI to the PlatformIO features.
- The release includes three new installed binaries: geopmread, geopmwrite, and geopmagent.
- Each of these command line interfaces is documented with a man page and there is a man page for a future command line tool called geopmendpoint.
- Deprecated geopm_policy_*() interfaces that have been replaced with the geopm_agent_*() and geopm_endpoint_*() APIs.
- Introduced the first three Agent implementations: MonitorAgent PowerBalancerAgent and EnergyEfficientAgent.
- Added documentation for monitor, energy_efficient, and power_balancer Agents, but the implementation is not currently aligned.
- The monitor agent is implemented and fully featured.
- The energy_efficient agent will soon be extended to match the man page, but does currently provide similar functionality to the efficient_freq Decider.
- The power_balancer agent is a work in progress that is not well aligned with the man page, but will be feature complete soon.
- Report generated by Agent code path designed to be backward compatible with reports generated with the Decider code path.
- Confirmed const correctness for all class methods.
- New envoronment variables documented in geopm(7): GEOPM_ENDPOINT, GEOPM_AGENT, GEOPM_TRACE_SIGNALS, and GEOPM_DISABLE_HYPERTHREADS.
- Remove GEOPM_ERROR_AFFINITY_IGNORE environment variable, no longer required for testing.
- Extend the PluginFactory to require a the registration of a dictionary (map<string,string>) to enable queries of plugin capabilities.
- Use stricter criterion for selecting plugin files to load, name must be of the form libgeopmpi*.so.0.0.0 where 0.0.0 is the GEOPM ABI version.
- Add a configure option to enable use of the msr-safe ioctl interface for writing with PlatformIO.
- Add API to mask out hints from region id.
- Change protected members of all classes to private where possible.
- Similar to the Kontroller/Controller replacement, the KprofileIOGroup KprofileIOSample and KruntimeRegulator are temporary replacements for their non-K counterparts and will be renamed.
- Replace all raw pointer usage with C++11 smart pointers if possible.
- Use default keyword for constructors and destructors where appropriate.

- Change the way the plugin factories work.
- Replace independent factories with single templated class.
- No longer register with a half instantiated object.
- Each plugin type has a make_plugin() static method that news a pointer to the base class.
- The make_plugin() function pointer is what is registered with the factory.
- Add public interface to register IOGroups with PlatformIO which enables IOGroups to be created at runtime.

- Standardize the IOGroup signal and control names so that they are prefixed by the IOGroup name and two colons.
- Agents should generally use high level aliases rather than these low level signals and controls.
- Introduce functions for converting between signals and bit-fields to allow for PlatformIO to provide full 64 bit integer signals like the region ID.
- Add overflow function type to MSR class.
- Change frequency APIs to use Hz to enforce uniform use of SI units.
- Use instruction offset in OMPT derived region name; this resolves a name ambiguity when more than one OpenMP region is discovered within the same function.


- Updated features:
- Enable Agent to augment report and trace.
- Enable user to augement trace through environment variable GEOPM_TRACE_SIGNALS in new code path.
- Changes to PlatformIO to support non-cpu domains.
- Added MSR save/restore functionality to PlatformIO save/reset interfaces.
- Allow loading PlatformIO when some IOGroups fail to load.
- Add aggregation functions to PlatformIO to encode how to combine signals.
- Add PlatformTopo methods for converting domain to string and vice versa.
- Add signal_names() and control_names() to PlatformIO and IOGroup.
- Add Skylake server (SKX) as a supported platform.
- OMPT report region names include instruction offset, now two OpenMP regions within the same function can be distinguished.
- Add region runtime as default trace column.
- Simpler column names in trace; print some columns using old names.
- Change region ID to hex in report and trace.
- Order regions in report by runtime.
- Add application total ignore time to report.
- Replace tabs with spaces for report formatting.
- Enable PlatformIO to support Epoch based signals.
- Add power signals to PlatformIO using derivative calculation previously done in Region object.
- Add PlatformIO aliases for region ID, progress, frequency and energy.
- Add CombinedSignal class which is used to combine signals from different IOGroups.
- Introducing the CpuinfoIOGroup which provides data from /proc/cpuinfo as signals.
- Allow for a user provided number of experiment iterations (loops) to perform for each geopmanalysis type
- Enable geopmanalysis to provide more detailed information about the results
- Allow turbo to be skipped by geopmanalysis when determining the best per-region frequencies.
- Updates to geopmanalysis python scriript to bypass trace parsing if requested and in debug plot ignore check for multiple profile names.
- Use hyphen instead of underscore in geopmanalysis options for consistancy with other interfaces.
- Don't require -n and -N with geopmanalysis when skipping launch.
- Pass output_dir through to plotter when using geopmanalysis.
- Changes to analysis.py for SC17 data: multiply energy percent by 100, have frequency sweep plots use frequencies from profile name.
- Leave -- separator in list of arguments to avoid parsing command line arguments intended for application as launcher arguements.
- Add and integrate make_unique implementation for C++11.
- Updated and extended integration tests:
- Integration tests validated with the GEOPM_AGENT set to test new code path.
- A few problems with the new code path exposed by integration tests have been added to github issues.
- A few changes to support integration tests with new code path have been integrated.
- Change io.py and integration tests: Allow hex numbers for region ID in report, skip extra lines in report.
- Introducing DefaultProfile singleton which supports C APIs for profiling.


- Updated unit tests:
- Many unit tests have been added to accompany the new code path which has many new classes.
- The new classes were specifically designed to enable unit testing poorly covered code that it refactors.
- Refactor Profile constructor into testable functions.
- Add unit tests for Profile class.
- Simple profile class in test directory for testing and debug: enables profiling of the GEOPM runtime itself.
- More detailed checks of messages in unit tests when exceptions are thrown.
- Fix test-license to assert that files in MANIFEST.EXEMPT exist.

- Bug fixes:
- Update GEOPM runtime C APIs to print to std::err instead of having the controller supress error messages.
- Handle exceptions that occur during app/controller handshake.
- Enable timeout rather than hang if Controller or application fail during execution.
- Fix for package-scoped MSRs that will write to all CPUs in a package rather than just one.
- Fix HSX and SKX frequency control MSRs to core domain.
- Fix issue when running on systems with offline CPUs.
- Do not report a completed send if policy or sample contains a NAN.
- Fix lscpu parsing for offline CPUs.
- Exclude regions with 0 count from report, except unmarked region, which is always 0.
- Add verbose error message when PluginFactory::dictionary() is called with plugin name that has not been registered.
- Fix get_alloc_nodes for slurm in geopmpy launcher
- Fix for test_power_consumption to checks the current platform cpuid to decide power budget.
- Fix geopmpy.launcher for Intel's mpiexec: does not accept -- as a separator for positional arguments.
- Fix for when GEOPM_PLUGIN_PATH contains multiple paths.
- Fix tutorial tarball so that it will build out of place.


CATEGORIZE BELOW HERE:


















- Update EfficientFreqDecider to use new runtime metric for performance.
- Remove Platform plugin registration.
- Update EfficientFreqDecider to use PlatformIO directly and remove method from Policy object for adjusting frequency.
- Remove TestPlugin code that is not used by tests.
- Update Contributing instructions with details of gerrit review process.
- Update PlatformIO to use IOGroups as intermediate objects.
- Introducing the MSRIOGroup an implementation of the IOGroup for MSRs.
- Introducing the TimeIOGroup providing an IOGroup for the time signal.
- Introducing IOGroup interface which provides a layer of abstraction between PlatformIO and each implementation for reading signals or writing controls in a group.
- IOGroup isthe base class for extending PlatformIO with plugins.
- Fix shared memory issues during startup when launching the Controller as a separate application.
- Remove erroneous double split of the Controller's comm.  The ppn1 comm is already passed into the constructor.
- Use gmock archive uploaded to the geopm organization on github.
- Add override keyword to derived classes.
- Removed explicit MPI dependency from TreeCommunicator and TreeCommunicatorLevel.
- New plugin registration flow implementation.
- Removed call to dlsym, and plugins now use __attribute__((constructor)) to specify a callback target for when plugin is loaded.
- In this callback the plugin should register with its respective Factory.
- Moved geopm_plugin_description_s definition to geopm.h
- Use delete keyword rather than throw to avoid copy constructor.
- Switch OMPT.cpp to use the new geopm_sched_popen() function.
- Introducing PlatformTopo, replacement for PlatformTopology.
- PlatformTopo is built on top of lscpu and does not require hwloc.
- Fix test to use in-memory file system to avoid adding missing msync() calls.
- Use forward declaration of classes rather than include one header inside of another.
- Throw on GlobalPolicy misconfiguration earlier TreeCommunicator constructor.
- Fix resource leak in TreeCommunicator constructor.
- Rename SimpleFreqDecider to EfficientFreqDecider which will be replaced by EnergyEfficientAgent.
- Update to efficient Decider and Agent related environment variables according to above name changes.
- The json-c library is no longer a dependency, all references have been removed.
- Now using the json11 library which is distributed in the "contrib" subdirectory.
- Many unit tests have been added and integration tests have been extended.
- Add geopmanalysis option to specify controller launch method.
- Fix tracing capability with geopmanalysis.
- Add Haswell and SandyBridge MSRs to PlatformIO interface.
- Add make check target to tutorial build.

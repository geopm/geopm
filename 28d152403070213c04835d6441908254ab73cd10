{
  "comments": [
    {
      "key": {
        "uuid": "77254b3d_a46197c3",
        "filename": "test_integration/geopm_test_integration.py",
        "patchSetId": 1
      },
      "lineNbr": 1286,
      "author": {
        "id": 1012567
      },
      "writtenOn": "2019-12-05T16:57:57Z",
      "side": 1,
      "message": "This test that sets specific policy values is great.  It would also be nice to have a test the works off of existing environment and policy files that we could use to check that a system is set up correctly (and maybe some setup scripts to go with it).  That doesn\u0027t need to be part of the python integration tests.",
      "range": {
        "startLine": 1285,
        "startChar": 1,
        "endLine": 1286,
        "endChar": 78
      },
      "revId": "28d152403070213c04835d6441908254ab73cd10",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8febfff3_0fd38d55",
        "filename": "test_integration/geopm_test_integration.py",
        "patchSetId": 1
      },
      "lineNbr": 1299,
      "author": {
        "id": 1012567
      },
      "writtenOn": "2019-12-05T16:57:57Z",
      "side": 1,
      "message": "it would be good to also include GEOPM_AGENT here, since that\u0027s how we expect these systems to be set up.",
      "range": {
        "startLine": 1299,
        "startChar": 28,
        "endLine": 1299,
        "endChar": 63
      },
      "revId": "28d152403070213c04835d6441908254ab73cd10",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2410a4d_abd1b710",
        "filename": "test_integration/geopm_test_integration.py",
        "patchSetId": 1
      },
      "lineNbr": 1299,
      "author": {
        "id": 1016629
      },
      "writtenOn": "2019-12-06T17:34:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8febfff3_0fd38d55",
      "range": {
        "startLine": 1299,
        "startChar": 28,
        "endLine": 1299,
        "endChar": 63
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "28d152403070213c04835d6441908254ab73cd10",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1804e139_76c8a04d",
        "filename": "test_integration/util.py",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 1012567
      },
      "writtenOn": "2019-12-05T16:57:57Z",
      "side": 1,
      "message": "Seems brittle, and we will need a way to check for the other plugin(s) such as the one that reads from the policystore.  There\u0027s also the problem that even if we read plugstack.conf, the names of those plugins are owned by the geopm-slurm repo.  Something to think about when we discuss how to package the plugins.",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 169,
        "endChar": 77
      },
      "revId": "28d152403070213c04835d6441908254ab73cd10",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9257dc27_2ca065d3",
        "filename": "test_integration/util.py",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 1016629
      },
      "writtenOn": "2019-12-05T19:54:22Z",
      "side": 1,
      "message": "I think the cleanest way would be to query active plugins from SLURM, but I haven\u0027t been able to find anything that lets me do that.\n\nWe could also ask procfs what libraries are currently loaded in a dummy job. But I don\u0027t think that will be allowed since the parent process (slurmstepd) is the one that we would need to query.\n\nIf we do want to go the route of parsing the SLURM config, I think it generally follows these rules (from https://slurm.schedmd.com/spank.html):\n - The configuration file defaults to /etc/slurm/plugstack.conf, but can be overridden by PlugStackConfig in /etc/slurm/slurm.conf\n - The plugstack configuration may have include directives to additional files that may contain libraries we are searching for\n - Comment lines should be ignored\n - Libraries can be provided by name (which are searched in PluginDir locations from slurm.conf), or by path\n - If searching by name isn\u0027t sufficient, we\u0027ll likely need to find the instance of the plugin that would be used by slurm, then search for some",
      "parentUuid": "1804e139_76c8a04d",
      "range": {
        "startLine": 167,
        "startChar": 0,
        "endLine": 169,
        "endChar": 77
      },
      "revId": "28d152403070213c04835d6441908254ab73cd10",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    }
  ]
}
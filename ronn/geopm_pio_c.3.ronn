geopm_pio_c(3) -- interfaces to query and modify platform
=========================================================

[//]: # (Copyright (c) 2015 - 2021, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## SYNOPSIS

**\#include [<geopm_pio.h>](https://github.com/geopm/geopm/blob/dev/src/geopm_pio.h)**

`Link with -lgeopm (MPI) or -lgeopmpolicy (non-MPI)`

  * `int geopm_pio_num_signal_name(`:
    `void);`

  * `int geopm_pio_signal_name(`:
    `int` _name_idx_, <br>
    `size_t` _result_max_, <br>
    `char *`_result_`);`

  * `int geopm_pio_num_control_name(`:
    `void);`

  * `int geopm_pio_control_name(`:
    `int` _name_index_, <br>
    `size_t` _result_max_, <br>
    `char *`_result_`);`

  * `int geopm_pio_signal_description(`:
    `const char *`_signal_name_, <br>
    `size_t` _description_max_, <br>
    `char *`_description_`);`

  * `int geopm_pio_control_description(`:
    `const char *`_control_name_, <br>
    `size_t` _description_max_, <br>
    `char *`_description_`);`

  * `int geopm_pio_signal_domain_type(`:
    `const char *`_signal_name_`);`

  * `int geopm_pio_control_domain_type(`:
    `const char *`_control_name_`);`

  * `int geopm_pio_read_signal(`:
    `const char *`_signal_name_, <br>
    `int` _domain_type_, <br>
    `int` _domain_idx_, <br>
    `double *`_result_`);`

  * `int geopm_pio_write_control(`:
    `const char *`_control_name_, <br>
    `int` _domain_type_, <br>
    `int` _domain_idx_, <br>
    `double` _setting_`);`

  * `int geopm_pio_save_control(`:
    `void);`

  * `int geopm_pio_restore_control(`:
    `void);`

  * `int geopm_pio_push_signal(`:
    `const char *`_signal_name_, <br>
    `int` _domain_type_, <br>
    `int` _domain_idx_`);`

  * `int geopm_pio_push_control(`:
    `const char *`_control_name_, <br>
    `int` _domain_type_, <br>
    `int` _domain_idx_`);`

  * `int geopm_pio_sample(`:
    `int` _signal_idx_, <br>
    `double *`_result_`);`

  * `int geopm_pio_adjust(`:
    `int` _control_idx_, <br>
    `double` _setting_`);`

  * `int geopm_pio_read_batch(`:
    `void);`

  * `int geopm_pio_write_batch(`:
    `void);`

## DESCRIPTION

The interfaces described in this man page are the C language bindings
for the **geopm::PlatformIO(3)** C++ class.  Please refer to the
**geopm::PlatformIO(3)** and **geopm::PlatformTopo(3)** man pages for
a general overview of the GEOPM platform interface layer.  The
**geopm_topo_c(3)** man page describes the C wrappers for the
**geopm::PlatformTopo(3)** C++ class and documents the
`geopm_domain_e` enum.  The caller selects from the `geopm_domain_e`
enum for the _domain_type_ parameter to many functions in the
geopm_pio_*() interface.  The return value from
`geopm_pio_signal_domain_type()` and `geopm_pio_control_domain_type()`
is also a value from the `geopm_domain_e` enum.

## INSPECTION FUNCTIONS

  * `geopm_pio_num_signal_name`():
    Returns the number of signal names that can be indexed with the
    _name_idx_ parameter to the `geopm_pio_signal_name()` function.
    Any error in loading the platform will result in a negative error
    code describing the failure.

  * `geopm_pio_signal_name`():
    Sets the _result_ string to the name of the signal indexed by
    _name_idx_.  At most _result_max_ bytes are written to the
    _result_ string.  The value of _name_idx_ must be greater than
    zero and less than the return value from
    `geopm_pio_num_signal_name()` or else an error will occur.
    Providing a string of `NAME_MAX` length (from `limits.h`) will be
    sufficient for storing any result.  If _result_max_ is too small
    to contain the signal name an error will occur.  Zero is returned
    on success and a negative error code is returned if any error
    occurs.

  * `geopm_pio_num_control_name`():
    Returns the number of control names that can be indexed with the
    _name_idx_ parameter to the `geopm_pio_control_name()` function.
    Any error in loading the platform will result in a negative error
    code describing the failure.

  * `geopm_pio_control_name`():
    Sets the _result_ string to the name of the control indexed by
    _name_idx_.  At most _result_max_ bytes are written to the
    _result_ string.  The value of _name_idx_ must be greater than
    zero and less than the return value from
    `geopm_pio_num_control_name()` or else an error will occur.
    Providing a string of `NAME_MAX` length (from `limits.h`) will be
    sufficient for storing any result.  If _result_max_ is too small
    to contain the control name an error will occur.  Zero is returned
    on success and a negative error code is returned if any error
    occurs.

  * `geopm_pio_signal_description`():
    Sets the _result_ string to the signal description associated with
    _signal_name_.  At most _result_max_ bytes are written to the
    _result_ string.  Providing a string of `NAME_MAX` length (from
    `limits.h`) will be sufficient for storing any result.  If
    _result_max_ is too small to contain the description an error will
    occur.  Zero is returned on success and a negative error code is
    returned if any error occurs.

  * `geopm_pio_control_description`():
    Sets the _result_ string to the control description associated with
    _control_name_.  At most _result_max_ bytes are written to the
    _result_ string.  Providing a string of `NAME_MAX` length (from
    `limits.h`) will be sufficient for storing any result.  If
    _result_max_ is too small to contain the description an error will
    occur.  Zero is returned on success and a negative error code is
    returned if any error occurs.

  * `geopm_pio_signal_domain_type`():
    Query the domain for the signal with name _signal_name_.  Returns
    one of the `geopm_domain_e` values signifying the granularity at
    which the signal is measured.  Will return a negative error code
    if any error occurs, e.g. a request for a _signal_name_ that
    is not supported by the platform.

  * `geopm_pio_control_domain_type`():
    Query the domain for the control with the name _control_name_.
    Returns one of the `geopm_domain_e` values signifying the
    granularity at which the control can be adjusted.  Will return a
    negative error code if any error occurs, e.g. a request for a
    _control_name_ that is not supported by the platform.

## SERIAL FUNCTIONS

  * `geopm_pio_read_signal`():
    Read from the platform and interpret into SI units a signal
    associated with _signal_name_ and store the value in _result_.
    This value is read from the `geopm_topo_e` _domain_type_ domain
    indexed by _domain_idx_.  If the signal is native to a domain
    contained within _domain_type_, the values from the contained
    domains are aggregated to form _result_.  Calling this function
    does not modify values stored by calling `geopm_pio_read_batch()`.
    If an error occurs then negative error code is returned.  Zero is
    returned upon success.

  * `geopm_pio_write_control`():
    Interpret the _setting_ in SI units associated with _control_name_
    and write it to the platform.  This value is written to the
    `geopm_topo_e` _domain_type_ domain indexed by _domain_idx_.  If
    the control is native to a domain contained within _domain_type_,
    then the _setting_ is written to all contained domains.  Calling
    this function does not modify values stored by calling
    `geopm_pio_adjust()`.  If an error occurs then negative error code
    is returned.  Zero is returned upon success.

  * `geopm_pio_save_control`():
    Save the state of all controls so that any subsequent changes made
    through `geopm_pio_write_control()` or `geopm_pio_write_batch()`
    may be reverted with a call to `geopm_pio_restore_control()`.  The
    control settings are stored in memory managed by GEOPM.  If an
    error occurs then negative error code is returned.  Zero is
    returned upon success.

  * `geopm_pio_restore_control`():
    Restore the state recorded by the last call to
    `geopm_pio_save_control()` so that all subsequent changes made
    through `geopm_pio_write_control()` or `geopm_pio_write_batch()`
    are reverted to their previous settings.  If an error occurs then
    negative error code is returned.  Zero is returned upon success.

## BATCH FUNCTIONS

  * `geopm_pio_push_signal`():
    Push a signal onto the stack of batch access signals.  The signal
    is defined by selecting a _signal_name_ from one of the values
    returned by the `geopm_pio_signal_name()` function, the
    _domain_type_ from one of the `geopm_domain_e` values, and the
    _domain_idx_ between zero to the value returned by
    `geopm_topo_num_domain`(_domain_type_).  Subsequent calls to the
    `geopm_pio_read_batch()` function will read the signal and update
    the internal state used to store batch signals.  The return value
    of `geopm_pio_push_signal()` is an index that can be passed as the
    _sample_idx_ parameter to `geopm_pio_sample()` to access the
    signal value stored in the internal state from the last update.  A
    distinct signal index will be returned for each unique combination
    of input parameters.  All signals must be pushed onto the stack
    prior to the first call to `geopm_pio_sample()` or
    `geopm_pio_read_batch()`.  Attempts to push a signal onto the
    stack after the first call to `geopm_pio_sample()` or
    `geopm_pio_read_batch()` or attempts to push a _signal_name_ that
    is not a value provided by `geopm_pio_signal_name()` will result
    in a negative return value.

  * `geopm_pio_push_control`():
    Push a control onto the stack of batch access controls.  The
    control is defined by selecting a _control_name_ from one of the
    values returned by the `geopm_pio_control_name()` function, the
    _domain_type_ from one of the `geopm_domain_e` values, and the
    _domain_idx_ between zero to the value returned by
    `geopm_topo_num_domain`(_domain_type_).  The return value of
    `geopm_pio_push_control()` can be passed to the
    `geopm_pio_adjust()` function which will update the internal state
    used to store batch controls.  Subsequent calls to the
    `geopm_pio_write_batch()` function access the control values in
    the internal state and write the values to the hardware.  A
    distinct control index will be returned for each unique
    combination of input parameters.  All controls must be pushed onto
    the stack prior to the first call to `geopm_pio_adjust()` or
    `geopm_pio_write_batch()`.  Attempts to push a controls onto the
    stack after the first call to `geopm_pio_adjust()` or
    `geopm_pio_write_batch()` or attempts to push a _control_name_
    that is not a value provided by `geopm_pio_control_name()` will
    result in a negative return value.

  * `geopm_pio_sample`():
    Samples cached value of a single signal that has been pushed via
    `geopm_pio_push_signal()` and writes the value into _result_.  The
    _signal_idx_ provided matches the return value from
    `geopm_pio_push_signal()` when the signal was pushed. The cached
    value is updated at the time of call to `geopm_pio_read_batch()`.

  * `geopm_pio_adjust`():
    Updates cached value for single control that has been pushed via
    `geopm_pio_push_control()` to the value _setting_.  The
    _control_idx_ provided matches the return value from
    `geopm_pio_push_control()` when the control was pushed.  The
    cached value will be written to the platform at time of call to
    `geopm_pio_write_batch()`.

  * `geopm_pio_read_batch`():
    Read all push signals from the platform so that the next call to
    `geopm_pio_sample()` will reflect the updated data.

  * `geopm_pio_write_batch`():
    Write all pushed controls so that values provided to
    `geopm_pio_adjust()` are written to the platform.


## RETURN VALUE

If an error occurs in any call to an interface documented here, the
return value of the function will be a negative integer
corresponding to one of the error codes documented in
**geopm_error(3)**.

## SEE ALSO
**geopm(7)**,
**geopm_topo_c(3)**,
**geopm::PlatformTopo(3)**,
**geopm::PlatformIO(3)**

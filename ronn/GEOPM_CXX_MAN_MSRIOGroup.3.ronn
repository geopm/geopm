geopm::MSRIOGroup -- IOGroup providing MSR-based signals and controls
=====================================================================

[//]: # (Copyright (c) 2015 - 2021, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## SYNOPSIS

**\#include [<geopm/MSRIOGroup.hpp>](https://github.com/geopm/geopm/blob/dev/src/MSRIOGroup.hpp)**

`Link with -lgeopm (MPI) or -lgeopmpolicy (non-MPI)`

  * `virtual set<string> signal_names(`:
    `void) const = 0`;

  * `virtual set<string> control_names(`:
    `void) const = 0`;

  * `virtual bool is_valid_signal(`:
    `const string &`_signal_name_`) const = 0;`

  * `virtual bool is_valid_control(`:
    `const string &`_control_name_`) const = 0;`

  * `virtual int signal_domain_type(`:
    `const string &`_signal_name_`) const = 0;`

  * `virtual int control_domain_type(`:
    `const string &`_control_name_`) const = 0;`

  * `virtual int push_signal(`:
    `const string &`_signal_name_`,` <br>
    `int` _domain_type_`,` <br>
    `int` _domain_idx_`) = 0`;

  * `virtual int push_control(`:
    `const string &`_control_name_`,` <br>
    `int` _domain_type_`,` <br>
    `int` _domain_idx_`) = 0`;

  * `virtual void read_batch(`:
    `void) = 0`;

  * `virtual void write_batch(`:
    `void) = 0`;

  * `virtual double sample(`:
    `int` _sample_idx_`) = 0;`

  * `virtual void adjust(`:
    `int` _control_idx_`,` <br>
    `double` _setting_`) = 0;`

  * `virtual double read_signal(`:
    `const string &`_signal_name_`,` <br>
    `int` _domain_type_`,` <br>
    `int` _domain_idx_`) = 0;`

  * `virtual void write_control(`:
    `const string &`_control_name_`,` <br>
    `int` _domain_type_`,` <br>
    `int` _domain_idx_`,` <br>
    `double` _setting_`) = 0;`

  * `virtual void save_control(`:
    `void) = 0`;

  * `virtual void restore_control(`:
    `void) = 0`;

  * `virtual function<double(const vector<double> &)> agg_function(`:
    `const string &`_signal_name_`) const = 0;`

  * `virtual string signal_description(`:
    `const string &`_signal_name_`) const = 0;`

  * `virtual string control_description(`:
    `const string &`_control_name_`) const = 0;`

  * `std::string msr_allowlist(`:
    `void) const;`

  * `std::string msr_allowlist(`:
    `int `_cpuid_`) const;`

  * `int cpuid(`:
    `void) const;`

  * `void register_msr_signal(`:
    `const std::string &`_signal_name_`);`

  * `void register_msr_control(`:
    `const std::string &`_control_name_`);`

  * `static std::string plugin_name(`:
    `void);`

  * `static std::unique_ptr<IOGroup> make_plugin(`:
    `void);`

## DESCRIPTION
The MSRIOGroup implements the **geopm::IOGroup(3)** interface to
provide hardware signals and controls using MSRs on Intel platforms.
It relies on **geopm::MSR(3)** and **geopm::MSRIO(3)**.

## CLASS METHODS

  * `signal_names`():
    Returns the list of signal names provided by this IOGroup.  This
    includes aliases for common hardware-based signals such as
    FREQUENCY, as well as the supported MSRs for the current platform.

  * `control_names`():
    Returns the list of control names provided by this IOGroup.  This
    includes aliases for common hardware-based controls such as
    FREQUENCY, as well as the supported MSRs for the current platform.

  * `is_valid_signal`():
    Returns whether the given _signal_name_ is supported by the
    MSRIOGroup for the current platform.  Note that different
    platforms may have different supported MSRs.

  * `is_valid_control`():
    Returns whether the given _control_name_ is supported by the
    MSRIOGroup for the current platform.  Note that different
    platforms may have different supported MSRs.

  * `signal_domain_type`():
    Returns the domain type for the the signal specified by
    _signal_name_.  The domain for a signal may be different on
    different platforms.

  * `control_domain_type`():
    Returns the domain type for the the control specified by
    _control_name_.  The domain for a control may be different on
    different platforms.

  * `push_signal`():
    Adds the signal specified by _signal_name_ for _domain_type_ at
    index _domain_idx_ to the list of signals to be read during
    read_batch().  If the domain of a signal spans multiple Linux
    logical CPUs, only one CPU from that domain will be read, since
    all CPUs from the same domain and index will return the same
    value.

  * `push_control`():
    Adds the control specified by _control_name_ for _domain_type_ at
    index _domain_idx_ to the list of controls to be written during
    write_batch().  If the domain of a control spans multiple Linux
    logical CPUs, values written to that control will be written to
    all CPUs in the domain.

  * `read_batch`():
    Sets up **geopm::MSRIO(3)** for batch reading if needed, then reads
    all pushed signals through the MSRIO::read_batch() method.

  * `write_batch`():
    Writes all adjusted values through the **geopm::MSRIO(3)**
    write_batch() method.

  * `sample`():
    Returns the value of the signal specified by a _signal_idx_
    returned from push_signal().  The value will have been updated by
    the most recent call to read_batch().

  * `adjust`():
    Sets the control specified by a _control_idx_ returned from
    push_control() to the value _setting_.  The value will be written
    to the underlying MSR by the next call to write_batch().

  * `read_signal`():
     Immediately read and decode the underlying MSR supporting
    _signal_name_ for _domain_type_ at index _domain_idx_ and return
    the result in SI units.

  * `write_control`():
    Immediately encode the SI unit value _setting_ and write the
    correct bits of the MSR supporting _control_name_ for
    _domain_type_ at _domain_idx_.

  * `save_control`():
    Attempts to read and save the current values of all control MSRs
    for the platform.  If any control is not able to be read, it will
    be skipped.

  * `restore_control`():
    Using the values saved by save_control(), attempts to write back
    the original values of all control MSRs.  Any control that is not
    able to be written will be skipped.

  * `agg_function`():
    Returns the function that should be used to aggregate
    _signal_name_.  If one was not previously specified by this class,
    the default function is select_first from **geopm::Agg(3)**.

  * `signal_description`():
    Returns a string description for _signal_name_, if defined.
    Further descriptions of MSR signals can be found in The Intel
    Software Developer's Manual at
    <https://software.intel.com/en-us/articles/intel-sdm>

  * `control_description`():
    Returns a string description for _control_name_, if defined.
    Further descriptions of MSR controls can be found in The Intel
    Software Developer's Manual at
    <https://software.intel.com/en-us/articles/intel-sdm>.

  * `signal_behavior`():
    Returns one of the IOGroup::signal_behavior_e values which
    describes about how a signal will change as a function of time.
    This can be used when generating reports to decide how to
    summarize a signal's value for the entire application run.

  * `msr_allowlist`():
    Fill string with the msr-safe allowlist file contents reflecting
    all known MSRs for the current platform, or if _cpuid_ is
    provided, for the platform specified by _cpuid_.  Returns a string
    formatted to be written to an msr-safe allowlist file.

  * `cpuid`():
    Get the cpuid of the current platform.

  * `register_msr_signal`():
    Register a single MSR field as a signal. This is called by
    init_msr().  The _signal_name_ is a compound signal name of the
    form "msr_name:field_name" where msr_name is the name of the MSR
    and the field_name is the name of the signal field held in the
    MSR.

  * `register_msr_control`():
    Register a single MSR field as a control. This is called by
    init_msr().  The _control_name_ is a compound control name of the
    form "msr_name:field_name" where msr_name is the name of the MSR
    and the field_name is the name of the control field held in the
    MSR.

  * `plugin_name`():
    Returns the name of the plugin to use when this plugin is
    registered with the IOGroup factory; see
    **geopm::PluginFactory(3)** for more details.

  * `make_plugin`():
    Returns a pointer to a new MSRIOGroup object; see
    **geopm::PluginFactory(3)** for more details.

## ENUMERATIONS

  * `enum m_cpuid_e`:
    Contains the list of currently-supported cpuid values.  The cpuid
    can be determined by running `lscpu` and appending the CPU family
    in hex to the Model in hex.

## ENVIRONMENT
If the `GEOPM_PLUGIN_PATH` environment variable is set to a
colon-separated list of paths, the paths will be checked for files
starting with "msr_" and ending in ".json".  The default plugin path
will also be searched.  The MSRIOGroup will attempt to load additional
MSR definitions from any JSON file it finds.  Refer to the
documentation for `--geopm-plugin-path` in **geopmlaunch(1)**.

## COPYRIGHT
Copyright (c) 2015 - 2021, Intel Corporation. All rights reserved.

## SEE ALSO
**geopm(7)**,
**geopm::IOGroup(3)**,
**geopm::MSR(3)**,
**geopm::MSRIO(3)**,
**geopmlaunch(1)**

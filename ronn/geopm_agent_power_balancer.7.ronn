geopm_agent_power_balancer(7) -- agent optimizes performance under a power cap
==============================================================================

[//]: # (Copyright (c) 2015, 2016, 2017, 2018, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## DESCRIPTION

The PowerBalancerAgent is designed to enforce an application wide
average per-compute-node power cap while varying the power cap of
individual compute nodes to optimize overall application performance.
This is acheived by providing more than average power to the compute
nodes reporting lower performance and less than average power to the
nodes with higher performance.  The algorithm is designed to midigate
load imbalance in the application through the redistribution of power.

The relationship between power cap and application performance is
dependent on may factors including the instruction mix of the
application, manufacturing variation between the processors, problem
size, and data locality.  Because these factors and their
relationships are not easily measured or predicted, determining the
correct power budget to achieve balanced performance is determined
emperically through an optimization technique that is hierarchical
across the Agent tree.

The application performance is measured by the duration of application
epoch.  The epoch run time is reported by each MPI rank once every
trip around the outer loop of an iterative application.  A windowed
median filter is applied to the sequence of epoch times recorded by
each rank, and then the maximum of these median filtered values across
all MPI ranks running on each compute node is used as the measure of
the inverse of compute node performance.  See the **geopm_prof_c(3)**
man page for more information about the **geopm_prof_epoch(3)**
interface used to profile the outer loop of an itererative
application.

## WARNING: NOT IMPLEMENTED
The PowerBalancingAgent is not yet implemented as described here.  The
Agent is a work in progress, and this warning message will be updated
when it is completed.

## AGENT BEHAVIOR HIGHLIGHTS

* Agent Name:
  Set the `GEOPM_AGENT` environment variable to "power_balancer" and
  the Kontroller instances will select the PowerBalancerAgent for
  its control handler.  See **geopm(7)** for more information about
  environment variables.

* Ordered Policies Descending:

  `POWER_AVERAGE`: Sets the average power cap per compute node in
                   units of Watts.  The power cap applied to any one
                   compute node may be higher or lower than this
                   parameter, but the average power cap in agregrate
                   across all compute nodes controlled by the policy
                   will be equal to this value.

  `POWER_MINIMUM`: Sets the minimum power cap in Watts that can be
                   applied to any one compute node.  All power caps
                   applied will be greater than or equal to this
                   parameter.

  `POWER_MAXIMUM`: Sets the maximum power cap in Watts that can be
                   applied to any one compute node.  All power caps
                   applied will be less than or equal to this
                   parameter.


  `TIME_WINDOW`: Sets the time window in seconds over which the power
                 cap is enforced.  The difference in energy between
                 any two samples separated by `TIME_WINDOW` seconds
                 divided by `TIME_WINDOW` will be less than the power
                 cap applied to that node.

* Ordered Samples Ascending:

  `EPOCH_RUNTIME`: The maximum of the outer loop trip time in seconds
                   median filtered by each MPI rank.

  `EPOCH_ENERGY`: The maximum of the energy in Joules consumed during
                  each outer loop execution median filtered by each
                  MPI rank.  Note: the average power consumed over the
                  last epoch can be evaluated by dividing the
                  `EPOCH_ENERGY` by the `EPOCH_RUNGIME`.

  `POWER_MAXIMUM`: Maximium power excursion in Watts measured over the
                   last epoch.  The maximum power excursion is
                   determined by differencing energy values across the
                   time window provided by the policy.

  `IS_CONVERGED`: Will be 1.0 if the average power policy has been
                  enforced and the power consumption by all nodes is
                  within the assigned limits, otherwise it will be
                  0.0.

* Tracing Modifications:

  `epoch_runtime`: Time interval in seconds between the last two epoch
                   calls by the application averaged over all ranks.

  `power_package`: Instantaneous power measurment of all processor
                   packages on each compute node averaged over all
                   compute nodes allocated to the application.

  `power_dram`: Instantaneous power measurment of all DRAM modules in
                each compute node averaged over all compute nodes
                allocated to the application.

  `is_converged`: Will be 1.0 if the average power policy has been
                  enforced and the power consumption is within the
                  assigned limits on the compute node associated with
                  the trace file, otherwise it will be 0.0.

  `power_budget`: Power budget assigned to the compute node associated
                  with the trace file at time of sampling.


* Report Modifiers:
  N/A

* Control Loop Gate:
  The agent gates the Kontroller's control loop to a cadence of 5
  updates to the POWER_PACKAGE platform signal.  This agent propagates
  its ascending signals up the tree every 50 updates to the
  POWER_PACKAGE platform signal (i.e 10 control cycles).

## COPYRIGHT
Copyright (c) 2015, 2016, 2017, 2018, Intel Corporation. All rights reserved.

## SEE ALSO
**geopm(7)**,
**geopmpy(7)**,
**geopm_ctl_c(3)**,
**geopm_error(3)**,
**geopm_fortran(3)**,
**geopm_policy_c(3)**,
**geopm_prof_c(3)**,
**geopm_sched(3)**,
**geopm_version(3)**,
**geopmanalysis(1)**,
**geopmaprun(1)**,
**geopmbench(1)**,
**geopmctl(1)**,
**geopmplotter(1)**,
**geopmendpoint(1)**,
**geopmsrun(1)**

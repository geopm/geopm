geopm::RegionAggregator(3) -- per-region aggregated signal data
===============================================================

[//]: # (Copyright (c) 2015 - 2021, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## SYNOPSIS

**\#include [<geopm/RegionAggregator.hpp>](https://github.com/geopm/geopm/blob/dev/src/RegionAggregator.hpp)**

`Link with -lgeopm (MPI) or -lgeopmpolicy (non-MPI)`

  * `void init(`:
    `void);`

  * `int push_signal_total(`:
    `const std::string &`_signal_idx_`,`<br>
    `int `_domain_type_`,`<br>
    `int `_domain_idx_`);`

  * `double sample_total(`:
    `int `_signal_idx_`,`<br>
    `uint64_t `_region_hash_`);`

  * `void read_batch(`:
    `void);`

  * `std::set<uint64_t> tracked_region_hash(`:
    `void) const;`

## DESCRIPTION
The RegionAggregator is used to store running totals of various
signals per region.  Regions are automatically detected through
sampling the REGION_HASH signal.  The object also accumulates data for
the epoch.  The set of signals to be tracked is determined by pushing
signals similar to the `push_signal()` method of
**geopm::PlatformIO(3)**.

## CLASS METHODS

  * `init`():
    Push required PlatformIO signals (EPOCH_COUNT).

  * `push_signal_total`():
    Push a signal to be accumulated per-region.  It must be a valid
    signal available through PlatformIO.  The signal to sample and
    aggregate is _signal_name_ and it will be collected for the domain
    _domain_type_ at _domain_idx_.  The return value is an index to be
    used with sample() to refer to this signal.  This index matches
    the index returned by **geopm::PlatformIO(3)**::push_signal() for
    the same signal name and domain.  Note that unlike other signals
    this is a total accumulated per region by subtracting the value of
    the signal at the region exit from the region entry.  Region entry
    and exit are not exact and are determined by the value of the
    REGION_HASH signal at the time of read_batch() for the same domain
    type and index as the signal of interest.  This aggregation should
    only be used for signals that are monotonically increasing, such
    as time.

  * `sample_total`():
    Returns the total accumulated value of a signal for one
    region. The signal must have been pushed to accumlate as
    per-region values.  The index returned from push_signal_total()
    should be passed to _signal_idx_.  The region of interest is
    passed in _region_hash_.  Note that unlike other signals this is a
    total accumulated per region by subtracting the value of the
    signal at the region exit from the region entry.  Region entry and
    exit are not exact and are determined by the value of the
    REGION_HASH signal at the time of read_batch().

  * `read_batch`():
    Updates stored totals for each signal after
    PlatformIO::read_batch() has been called.  This should be called
    with every PlatformIO update because sample_total() maybe not be
    called until the end of execution.  Agents that include an
    instance of the RegionAggregator can include this call in their
    implementation of sample_platform().

  * `tracked_region_hash`():
    Returns the set of region IDs tracked by this object.  Note that
    very short-running regions may not be detected through sampling
    the REGION_HASH signal.

## COPYRIGHT
Copyright (c) 2015 - 2021, Intel Corporation. All rights reserved.

## SEE ALSO
**geopm(7)**

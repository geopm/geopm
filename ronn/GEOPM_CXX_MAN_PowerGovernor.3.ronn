geopm::PowerGovernor(3) -- enforces a power limit
=================================================

[//]: # (Copyright (c) 2015, 2016, 2017, 2018, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## SYNOPSIS

**\#include [<geopm/PowerGovernor.hpp>](https://github.com/geopm/geopm/blob/dev/src/PowerGovernor.hpp)**

`Link with -lgeopm (MPI) or -lgeopmpolicy (non-MPI)`

## DESCRIPTION

## SYNOPSIS
  * `IPowerGovernor(`:
    `void) = default;`

  * `~IPowerGovernor(`:
    `void) = default;`

  * `void init_platform_io(`:
    `void);`

  * `void sample_platform(`:
    `void);`

  * `bool adjust_platform(`:
    `double `_node_power_request_`,`<br>
    `double &`_node_power_actual_`);`

  * `void set_power_bounds(`:
    `double `_min_pkg_power_`,`<br>
    `double `_max_pkg_power_`);`

  * `double power_package_time_window(`:
    `void) const;`

  * `PowerGovernor(`:
    `IPlatformIO &`_platform_io_`,`<br>
    `IPlatformTopo &`_platform_topo_`);`

  * `~PowerGovernor(`:
    `void);`

  * `void init_platform_io(`:
    `void);`

  * `void sample_platform(`:
    `void);`

  * `bool adjust_platform(`:
    `double `_node_power_request_`,`<br>
    `double &`_node_power_actual_`);`

  * `void set_power_bounds(`:
    `double `_min_pkg_power_`,`<br>
    `double `_max_pkg_power_`);`

  * `double power_package_time_window(`:
    `void) const;`

## DESCRIPTION
Class PowerGovernor

## CLASS METHODS
  * `IPowerGovernor`():


  * `~IPowerGovernor`():


  * `init_platform_io`():
    Registsters signals and controls with PlatformIO.

  * `sample_platform`():
    To be called inside of the Agent's
    sample_platform() method to read any values
    required when calling adjust_platform().  This
    method is currently a noop since no signals are
    required for this algorithm.

  * `adjust_platform`():
    Calculates metric of DRAM power history, subtracting that value
    from the provided target node power.
    [in] node_power_request Total expected node power consumption.
    [out] node_power_actual Achievable node power limit.  Should equal
    @return True if platform adjustments have been made, false otherwise.

  * `set_power_bounds`():
    Sets min and max package bounds.
    [in] min_pkg_power Minimum package power.
    [in] max_pkg_power Maximum package power.

  * `power_package_time_window`():
    Get the time window for controling package power.
    @return Time window in units of seconds.

  * `PowerGovernor`():


  * `~PowerGovernor`():


  * `init_platform_io`():


  * `sample_platform`():


  * `adjust_platform`():


  * `set_power_bounds`():


  * `power_package_time_window`():


## ENUMERATIONS


This class is used by the PowerGovernorAgent and the PowerBalancerAgent
to enforce power limits.

For more details, see the doxygen
page at <https://geopm.github.io/dox/classgeopm_1_1_power_governor.html>.

## COPYRIGHT
Copyright (c) 2015, 2016, 2017, 2018, Intel Corporation. All rights reserved.

## SEE ALSO
**geopm(7)**,
**geopm::PowerGovernorAgent(3)**,
**geopm::PowerBalancerAgent(3)**

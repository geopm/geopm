geopm_agent_c(3) -- query information about available agents
============================================================

[//]: # (Copyright (c) 2015 - 2021, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## SYNOPSIS

**\#include [<geopm_agent.h>](https://github.com/geopm/geopm/blob/dev/src/geopm_agent.h)**

`Link with -lgeopm`

  * `int geopm_agent_supported(`:
    `const char *`_agent_name_`);`

  * `int geopm_agent_num_policy(`:
    `const char *`_agent_name_, <br>
    `int *`_num_policy_`);`

  * `int geopm_agent_policy_name(`:
    `const char *`_agent_name_, <br>
    `int` _policy_idx_, <br>
    `size_t` _policy_name_max_, <br>
    `char *`_policy_name_`);`

  * `int geopm_agent_policy_json(`:
    `const char *`_agent_name_, <br>
    `const double *`_policy_array_, <br>
    `size_t` _json_string_max_, <br>
    `const char *`_json_string_`);`

  * `int geopm_agent_policy_json_partial(`:
    `const char *`_agent_name_, <br>
    `size_t` _policy_array_size_, <br>
    `const double *`_policy_array_, <br>
    `size_t` _json_string_max_, <br>
    `const char *`_json_string_`);`

  * `int geopm_agent_num_sample(`:
    `const char *`_agent_name_, <br>
    `int *`_num_sample_`);`

  * `int geopm_agent_sample_name(`:
    `const char *`_agent_name_, <br>
    `int` _sample_idx_, <br>
    `size_t` _sample_name_max_, <br>
    `char *`_sample_name_`);`

  * `int geopm_agent_num_avail(`:
    `int *`_num_agent_`);`

  * `int geopm_agent_name(`:
    `int` _agent_idx_, <br>
    `size_t` _agent_name_max_, <br>
    `char *`_agent_name_`);`

  * `int geopm_agent_enforce_policy(`:
    `void);`

## DESCRIPTION
The _geopm_agent_c_ interface is used to query GEOPM about agents on a
system and create static policies for those agents.  The interface
provides the ability to query about specific types of supported
agents, the policy parameters required by an agent, and the sample
parameters provided by an agent.  In addition, this interface provides
a way to create a JSON policy configuration file that will be parsed
by the GEOPM runtime for statically enforcing a job policy.

All functions described in this man page return an error code on failure and
zero upon success; see [ERRORS][] section below for details.

  * `geopm_agent_supported`():
    queries GEOPM to determine if _agent_name_ is supported.  Returns zero if
    an agent is supported, otherwise an error code is returned.

  * `geopm_agent_num_policy`():
    queries GEOPM for the number of policy parameters required by _agent_name_.
    The result is placed in _num_policy_.  Returns zero if an agent is
    supported, otherwise an error code is returned.

  * `geopm_agent_policy_name`():
    queries GEOPM for the name of a policy parameter occurring at index
    _policy_idx_ for _agent_name_.  The result is stored in _policy_name_.  The
    number of bytes reserved for the output string is specified in
    _policy_name_max_.  Returns zero if an agent is supported, the _policy_idx_
    is in range, and the policy name can be stored in the output string
    (_policy_name_).  Otherwise an error code is returned.

  * `geopm_agent_policy_json`():
    creates a JSON file based on the provided _policy_array_ that can be used
    for statically controlling the job policy for _agent_name_.  The output is
    stored in the _json_string_ buffer.  The number of bytes reserved for the
    buffer is specified in _json_string_max_.

  * `geopm_agent_policy_json_partial`():
    creates a JSON file based on the provided _policy_array_ of length
    _policy_array_size_ that can be used for statically controlling
    the job policy for _agent_name_.  The output is stored in the
    _json_string_ buffer.  The number of bytes reserved for the buffer
    is specified in _json_string_max_.  The _policy_array_ may contain
    only a partial list of the policies accepted by the Agent.  Missing
    policy values will be automatically interpreted as NAN, indicating
    that the Agent should use a default value.

  * `geopm_agent_num_sample`():
    queries GEOPM for the number of sample parameters provided by _agent_name_.
    The result is stored in _num_sample_.  Returns zero on success, otherwise
    an error code is returned.

  * `geopm_agent_sample_name`():
    queries GEOPM for the name of a sample parameter occurring at index
    _sample_idx_ for _agent_name_.  The output is stored in the _sample_name_
    buffer.  The number of bytes allocated for the output buffer is specified
    in _sample_name_max_.  Returns zero if an agent is supported, the
    _sample_idx_ is in range, and the sample name can be stored in the output
    string (_sample_name_).  Otherwise an error code is returned.

  * `geopm_agent_num_avail`():
    queries GEOPM for the number of currently available agents.  The output
    is stored in _num_agent_.  Returns zero on success, otherwise
    an error code is returned.

  * `geopm_agent_name`():
    queries GEOPM for the name of the agent occurring at index _agent_idx_.  The
    result is stored in _agent_name_.  The number of bytes reserved for the
    output string is specified in _agent_name_max_.  Returns zero if the
    _agent_idx_ is in range, and the agent name can be stored in the output
    string (_agent_name_).  Otherwise an error code is returned.

  * `geopm_agent_enforce_policy`():
    queries the environment for the `GEOPM_AGENT` and `GEOPM_POLICY`
    and enforces the policy for the agent by writing controls to the
    platform (see **geopm_pio_c(3)**).  A resource manager can use
    this function to enforce the GEOPM configured policy (see
    **geopm(7)**) prior to releasing compute nodes for a user
    allocation.  More generally this function allows one-time use of
    an Agent outside of the context of an MPI runtime or the use of a
    GEOPM Controller.  Note that the enforcement of the policy will
    not support any of the dynamic features of the agent.  For instance,
    calling `geopm_agent_enforce_policy`() for the power_balancer will
    set all nodes to the same power limit, and those limits will not
    vary with time.

## ERRORS
All functions described on this man page return an error code.  See
**geopm_error(3)** for a full description of the error numbers and how
to convert them to strings.

## COPYRIGHT
Copyright (c) 2015 - 2021, Intel Corporation. All rights reserved.

## SEE ALSO
**geopm(7)**,
**geopm_agent_energy_efficient(7)**,
**geopm_agent_monitor(7)**,
**geopm_agent_power_balancer(7)**,
**geopm_agent_power_governor(7)**,
**geopm_error(3)**,
**geopmagent(1)**,
**geopmlaunch(1)**

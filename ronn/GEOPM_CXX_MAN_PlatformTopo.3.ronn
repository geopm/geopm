geopm::PlatformTopo(3) -- platform topology information
=======================================================

[//]: # (Copyright (c) 2015, 2016, 2017, 2018, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## NAMESPACES
The `IPlatformTopo` class, `PlatformTopo` class, and `platform_topo()`
singleton accessor method are members of `namespace geopm`, but the
full names, `geopm::IPlatformTopo`, `geopm::PlatformTopo`, and
`geopm::platform_topo()`, have been abbreviated in this manual.
In general, Agents and other users of this interface will use
an IPlatformTopo& variable to call PlatformTopo methods.

Note that `IPlatformTopo` class is an abstract base class that the
user interacts with.  The concrete implementation, `PlatformTopo`, is
hidden by the singleton accessor.  In this manual the `IPlatformTopo`
and `PlatformTopo` names are used interchangeably.

## SYNOPSIS

**\#include [<geopm/PlatformTopo.hpp>](https://github.com/geopm/geopm/blob/dev/src/PlatformTopo.hpp)**

`Link with -lgeopm (MPI) or -lgeopmpolicy (non-MPI)`

  * `IPlatformTopo &platform_topo(`
    `void);`

  * `int IPlatformTopo::num_domain(`
    `int` domain_type`) const;`

  * `std::set<int> IPlatformTopo::domain_cpus(`
    `int` domain_type,
    `int` domain_idx`) const;`

  * `int IPlatformTopo::domain_idx(`
    `int` domain_type,
    `int` cpu_idx`) const;`

  * `bool IPlatformTopo::is_domain_within(`
    `int` inner_domain,
    `int` outer_domain`) const;`

  * `int IPlatformTopo::define_cpu_group(`
    `const std::vector<int> &`cpu_domain_idx`);`

  * `static std::string IPlatformTopo::domain_type_to_name(`
    `int` domain_type`);`

  * `static int IPlatformTopo::domain_name_to_type(`
    `const std::string &`domain_name`);`

## DESCRIPTION
This class describes the number and arrangement of cores, sockets,
logical CPUs, memory banks, and other components.  This information is
used when calling methods of the **geopm::PlatformIO** interface.  The
topology of the current platform is available using the singleton
geopm::platform_topo().  The remaining methods are accessed through
this singleton.

Most methods in the `PlatformTopo` interface return or require as an
argument an integer domain type, used to refer to different parts of
the system topology.  The discussions in this manual omit the class
scope IPlatformTopo:: for brevity.  The available domain types are as
follows:

  * IPlatformTopo::DOMAIN_INVALID: Indicates an invalid domain

  * IPlatformTopo::DOMAIN_BOARD: All components on a user allocated
    compute node

  * IPlatformTopo::DOMAIN_PACKAGE: Single processor package in one
    socket

  * IPlatformTopo::DOMAIN_CORE: Physical core, i.e. a group of
    associated hyper-threads

  * IPlatformTopo::DOMAIN_CPU: Linux logical CPU

  * IPlatformTopo::DOMAIN_BOARD_MEMORY: Standard off-package DIMM
    (DRAM or NAND)

  * IPlatformTopo::DOMAIN_PACKAGE_MEMORY: On-package memory (MCDRAM)

  * IPlatformTopo::DOMAIN_BOARD_NIC: Network interface controller on
    the PCI bus

  * IPlatformTopo::DOMAIN_PACKAGE_NIC: Network interface controller on
    the processor package

  * IPlatformTopo::DOMAIN_BOARD_ACCELERATOR: Accelerator card on the
    PCI bus

  * IPlatformTopo::DOMAIN_PACKAGE_ACCELERATOR: Accelerator unit on the
    package (e.g on-package graphics)

Method Descriptions:

  * `platform_topo`():
    Returns the singleton accessor for the PlatformTopo interface.

  * `num_domain`():
    Number of domains on the platform of a particular _domain_type_.
    Refer to the list of domain types below.

  * `domain_cpus`():
    Get the set of Linux logical CPUs associated with the scope of
    _domain_type_ at _domain_idx_.

  * `domain_idx`():
    Get the domain index for a particular _domain_type_ that contains
    the given Linux logical CPU with index _cpu_idx_.

  * `define_cpu_group`():
    Define a new domain type containing the group of Linux logical
    CPUs in _cpu_domain_idx_ where the index of the cpu in the new
    domain is its index in the vector.  This method returns an
    integer for the new domain type.

  * `is_domain_within`():
    Check if _inner_domain_ is contained within _outer_domain_.
    M_DOMAIN_BOARD is the outermost domain representing the entire
    node.  All other domains are contained within _board_.
    M_DOMAIN_CORE, M_DOMAIN_CPU, M_DOMAIN_PACKAGE_MEMORY, and
    M_DOMAIN_PACKAGE_ACCELERATOR are contained within package.
    M_DOMAIN_CPU is contained within M_DOMAIN_CORE.  The following
    outline summarizes the hierarchy of containing domains, where each
    domain is also contained in parents of its parent domain.

```
    `M_DOMAIN_BOARD`
     +---`M_DOMAIN_PACKAGE`
          +---`M_DOMAIN_CORE`
               +---`M_DOMAIN_CPU`
          +---`M_DOMAIN_PACKAGE_MEMORY`
          +---`M_DOMAIN_PACKAGE_NIC`
          +---`M_DOMAIN_PACKAGE_ACCELERATOR`
     +---`M_DOMAIN_BOARD_MEMORY`
     +---`M_DOMAIN_BOARD_NIC`
     +---`M_DOMAIN_BOARD_ACCELERATOR`
```

  * `domain_type_to_name`():
    Convert a _domain_type_ integer to a string.  These strings are
    used by the **geopmread(1)** and geopmwrite(1)** tools.

  * `domain_name_to_type`():
    Convert a _domain_name_ string to the corresponding integer domain type.
    This method is the inverse of domain_type_to_name().


## EXAMPLES
The following example program queries the PlatformTopo to calculate various
information of interest about the platform.

```
#include <iostream>

#include <geopm/PlatformTopo.hpp>

using geopm::IPlatformTopo;

int main() {
    IPlatformTopo &topo = geopm::platform_topo();

    int num_cores = topo.num_domain(IPlatformTopo::M_DOMAIN_CORE);
    int num_cpus = topo.num_domain(IPlatformTopo::M_DOMAIN_CPU);
    int num_pkgs = topo.num_domain(IPlatformTopo::M_DOMAIN_PACKAGE);

    // Print counts of various domains
    std::cout << "Domain      Count      " << std::endl;
    std::cout << "-----------------------" << std::endl;
    std::cout << "cores       " << num_cores << std::endl;
    std::cout << "packages    " << num_pkgs << std::endl;
    std::cout << "core/pkg    " << num_cores / num_pkgs << std::endl;
    std::cout << "cpu/core    " << num_cpus / num_cores << std::endl;
    std::cout << "cpu/pkg     " << num_cpus / num_pkgs << std::endl;
}
```

For example, when run on a system with 2 sockets, 4 cores per socket,
and 3 hyperthreads per core, the following would be printed to
standard output:

```
    Domain      Count
    -----------------------
    cores       8
    packages    2
    core/pkg    4
    cpu/core    3
    cpu/pkg     12
```

This loop, inserted into the above program, prints the Linux CPUs on each package:

```
    for (int pkg_idx = 0; pkg_idx < num_pkgs; ++pkg_idx) {
        std::cout << "CPUs on package " << pkg_idx << ": ";
        std::set<int> cpus = topo.domain_cpus(IPlatformTopo::M_DOMAIN_PACKAGE, pkg_idx);
        for(auto pcpu : cpus) {
            std::cout << pcpu << " ";
        }
        std::cout << std::endl;
    }
```

The output for the same system would be:

    CPUs on package 0: 0 1 2 3 8 9 10 11 16 17 18 19
    CPUs on package 1: 4 5 6 7 12 13 14 15 20 21 22 23

To check which logical CPUs are on the same core as CPU 8:

```
    int my_cpu = 8;
    int cpu_core = topo.domain_idx(IPlatformTopo::M_DOMAIN_CORE, my_cpu);
    std::set<int> socket_cpu_set = topo.domain_cpus(IPlatformTopo::M_DOMAIN_CORE, cpu_core);
    for (auto cpu : socket_cpu_set) {
        if (cpu != my_cpu) {
            std::cout << cpu << " ";
        }
    }
    std::cout << std::endl;
```

The output for the same system would be:  0 16

The number of domains can also be use to check if a hardware feature, such as
on-package memory, is present or absent:

```
    if (topo.num_domain(IPlatformTopo::M_DOMAIN_PACKAGE_MEMORY) > 0) {
        std::cout << "On-package memory is present." << std::endl;
    }
    else {
        std::cout << "No on-package memory." << std::endl;
    }
```

## COPYRIGHT
Copyright (c) 2015, 2016, 2017, 2018, Intel Corporation. All rights reserved.

## SEE ALSO
**geopm(7)**,
**geopm::PlatformIO(3)**

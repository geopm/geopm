geopm::CpuinfoIOGroup(3) -- IOGroup for CPU frequency limits
============================================================

[//]: # (Copyright (c) 2015, 2016, 2017, 2018, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## SYNOPSIS

**\#include [<geopm/CpuinfoIOGroup.hpp>](https://github.com/geopm/geopm/blob/dev/src/CpuinfoIOGroup.hpp)**

`Link with -lgeopm (MPI) or -lgeopmpolicy (non-MPI)`

  * `CpuinfoIOGroup(`:
    `void);`

  * `CpuinfoIOGroup(`:
    `const std::string &`_cpu_info_path_`,`<br>
    `const std::string &`_cpu_freq_min_path_`,`<br>
    `const std::string &`_cpu_freq_max_path_`);`

  * `~CpuinfoIOGroup(`:
    `void) = default;`

  * `std::set<std::string> signal_names(`:
    `void) const;`

  * `std::set<std::string> control_names(`:
    `void) const;`

  * `bool is_valid_signal(`:
    `const std::string &`_signal_name_`) const;`

  * `bool is_valid_control(`:
    `const std::string &`_control_name_`) const;`

  * `int signal_domain_type(`:
    `const std::string &`_signal_name_`) const;`

  * `int control_domain_type(`:
    `const std::string &`_control_name_`) const;`

  * `int push_signal(`:
    `const std::string &`_signal_name_`,`<br>
    `int `_domain_type_`,`<br>
    `int `_domain_idx_`);`

  * `int push_control(`:
    `const std::string &`_control_name_`,`<br>
    `int `_domain_type_`,`<br>
    `int `_domain_idx_`);`

  * `void read_batch(`:
    `void);`

  * `void write_batch(`:
    `void);`

  * `double sample(`:
    `int `_batch_idx_`);`

  * `void adjust(`:
    `int `_batch_idx_`,`<br>
    `double `_setting_`);`

  * `double read_signal(`:
    `const std::string &`_signal_name_`,`<br>
    `int `_domain_type_`,`<br>
    `int `_domain_idx_`);`

  * `void write_control(`:
    `const std::string &`_control_name_`,`<br>
    `int `_domain_type_`,`<br>
    `int `_domain_idx_`,`<br>
    `double `_setting_`);`

  * `void save_control(`:
    `void);`

  * `void restore_control(`:
    `void);`

  * `std::function<double(const std::vector<double> &)> agg_function(`:
    `const std::string &`_signal_name_`) const;`

  * `std::string signal_description(`:
    `const std::string &`_signal_name_`) const;`

  * `std::string control_description(`:
    `const std::string &`_control_name_`) const;`

  * `static std::string plugin_name(`:
    `void);`

  * `static std::unique_ptr<IOGroup> make_plugin(`:
    `void);`

## DESCRIPTION
Class CpuinfoIOGroup
/// @brief IOGroup that provides constants for CPU frequency limits
///        as signals for PlatformIO.

## CLASS METHODS
  * `CpuinfoIOGroup`():


  * `CpuinfoIOGroup`():


  * `~CpuinfoIOGroup`():


  * `signal_names`():


  * `control_names`():


  * `is_valid_signal`():


  * `is_valid_control`():


  * `signal_domain_type`():


  * `control_domain_type`():


  * `push_signal`():


  * `push_control`():


  * `read_batch`():


  * `write_batch`():


  * `sample`():


  * `adjust`():


  * `read_signal`():


  * `write_control`():


  * `save_control`():


  * `restore_control`():


  * `agg_function`():


  * `signal_description`():


  * `control_description`():


  * `plugin_name`():


  * `make_plugin`():

## COPYRIGHT
Copyright (c) 2015, 2016, 2017, 2018, Intel Corporation. All rights reserved.

## SEE ALSO
**geopm(7)**,
**geopm::IOGroup(3)**

geopm::PlatformIO(3) -- geopm platform interface
================================================

[//]: # (Copyright (c) 2015, 2016, 2017, 2018, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## NAMESPACES
The `PlatformIO` class, the `IOGroup` class, and the `platform_io()`
singleton accessor function are members of the `namespace geopm`, but
the full names, `geopm::PlatformIO`, `geopm::IOGroup` and
`geopm::platform_io()`, have been abbreviated in this manual.
Similarly, the `std::` namespace specifier has been omitted from the
interface definitions for the following standard types:
`std::shared_ptr`, `std::set`, `std::string`, `std::function`,
`std::vector`, to enable better rendering of this manual.

## SYNOPSIS

**\#include [<geopm/PlatformIO.hpp>](https://github.com/geopm/geopm/blob/dev/src/PlatformIO.hpp)**

`Link with -lgeopm`

  * `IPlatformIO &platform_io(`:
    `void);`

  * `virtual void IPlatformIO::register_iogroup(`:
    `shared_ptr<IOGroup>` _iogroup_`) = 0;`

  * `virtual set<string> IPlatformIO::signal_names(`:
    `void) const = 0;`

  * `virtual set<string> IPlatformIO::control_names(`:
    `void) const = 0;`

  * `virtual int IPlatformIO::signal_domain_type(`:
    `const string &`_signal_name_`) const = 0;`

  * `virtual int IPlatformIO::control_domain_type(`:
    `const string &`_control_name_`) const = 0;`

  * `virtual int IPlatformIO::push_signal(`:
    `const string &`_signal_name_`,` <br>
    `int` _domain_type_`,`
    `int` _domain_idx_`) = 0;`

  * `virtual int IPlatformIO::push_control(`:
    `const string &`_control_name_`,` <br>
    `int` _domain_type_`,` <br>
    `int` _domain_idx_`) = 0;`

  * `virtual int IPlatformIO::num_signal(`:
    `void) const = 0;`

  * `virtual int IPlatformIO::num_control(`:
    `void) const = 0;`

  * `virtual double IPlatformIO::sample(`:
    `int` _signal_idx_`) = 0;`

  * `virtual void IPlatformIO::adjust(`:
    `int` _control_idx_`,`
    `double` _setting_`) = 0;`

  * `virtual void IPlatformIO::read_batch(`:
    `void) = 0;`

  * `virtual void IPlatformIO::write_batch(`:
    `void) = 0;`

  * `virtual double IPlatformIO::read_signal(`:
    `const string &`_signal_name_`,` <br>
    `int` _domain_type_`,` <br>
    `int` _domain_idx_`) = 0;`

  * `virtual void IPlatformIO::write_control(`:
    `const string &`_control_name_`,` <br>
    `int` _domain_type_`,` <br>
    `int` _domain_idx_`,` <br>
    `double` _setting_`) = 0;`

  * `virtual void IPlatformIO::save_control(`:
    `void) = 0;`

  * `virtual void IPlatformIO::restore_control(`:
    `void) = 0;`

  * `virtual function<double(const vector<double> &)> IPlatformIO::agg_function(`:
    `const string &`_signal_name_`) const = 0;`

  * `virtual string IPlatformIO::signal_description(`:
    `const string &`_signal_name_`) const = 0;`

  * `virtual string IPlatformIO::control_description(`:
    `const string &`_control_name_`) const = 0;`

  * `struct IPlatformIO::m_request_s {`:
    `string` _name_`;` <br>
    `int` _domain_type_`;` <br>
    `int` _domain_idx_`;` <br>
    `};`

## DESCRIPTION
The `geopm::PlatformIO` class provides a high-level interface for
signals and controls.  This class has a large number of built-in
signals and controls in addition to providing a framework for
extension.  The built-in signals and controls include a wide range of
hardware metrics, hardware settings, and signals derived from
application behavior.  Application behavior is tracked by GEOPM's
integration with MPI and OpenMP and also by application use of the
**geopm_prof_c(3)** mark-up interface. The `geopm::PlatformIO` class
can be extended through the **IOGroup(3)** plugin interface.

## SINGLETON ACCESSOR

  * `platform_io`():
    There is only one `PlatformIO` object, and the only way to access
    this object is through this function.  The function returns a
    reference to the single `PlatformIO` object that gives access to
    all of the CLASS METHODS described below.  See `EXAMPLE` section
    below.

## CLASS METHODS


## EXAMPLE

    /* Print a signal for all CPUs on the system. */

    #include <iostream>
    #include <string>
    #include <geopm/PlatformIO.hpp>
    #include <geopm/PlatformTopo.hpp>

    int main(int argc, char **argv)
    {
        if (argc != 2) {
            std::cerr << "Usage: " << argv[0] << " SIGNAL_NAME" << std::endl;
            return -1;
        }
        geopm::IPlatformIO &pio = geopm::platform_io();
        geopm::IPlatformTopo &topo = geopm::platform_topo();
        std::string signal_name = argv[1];

        const int DOMAIN = pio.signal_domain_type(signal_name);
        const int NUM_DOMAIN = topo.num_domain(DOMAIN);
        std::cout << "cpu_idx    " << signal_name << std::endl;
        for (int domain_idx = 0; domain_idx != NUM_DOMAIN; ++domain_idx) {
            double freq = pio.read_signal(signal_name, DOMAIN, domain_idx);
            for (const auto &cpu_idx : topo.domain_cpus(DOMAIN, domain_idx)) {
                std::cout << cpu_idx << "    " << freq << std::endl;
            }
        }
        return 0;
    }


## ERRORS
All functions described on this man page throw **geopm::Exception(3)**
on error.

## COPYRIGHT
Copyright (c) 2015, 2016, 2017, 2018, Intel Corporation. All rights reserved.

## SEE ALSO
**geopm(7)**
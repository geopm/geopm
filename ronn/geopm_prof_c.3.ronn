geopm_prof_c(3) -- application profiling interfaces
===================================================

[//]: # (Copyright (c) 2015, 2016, 2017, 2018, 2019, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## SYNOPSIS

**\#include [<geopm.h>](https://github.com/geopm/geopm/blob/dev/src/geopm.h)**

`Link with -lgeopm`

  * `int geopm_prof_region(`:
    `const char *`_region_name_, <br>
    `uint64_t` _hint_, <br>
    `uint64_t *`_region_id_`);`

  * `int geopm_prof_enter(`:
    `uint64_t` _region_id_`);`

  * `int geopm_prof_exit(`:
    `uint64_t` _region_id_`);`

  * `int geopm_prof_progress(`:
    `uint64_t` _region_id_, <br>
    `double` _fraction_`);`

  * `int geopm_prof_epoch(`:
    `void);`

  * `int geopm_tprof_init(`:
    `uint32_t` _num_work_unit_`);`

  * `int geopm_tprof_init_loop(`:
    `int` _num_thread_, <br>
    `int` _thread_idx_, <br>
    `size_t` _num_iter_, <br>
    `size_t` _chunk_size_`);`

  * `int geopm_tprof_post(`:
    `void);`

## DESCRIPTION
The functions described here enable application feedback to the GEOPM
control algorithm for identifying regions of code, progress within
regions, and iterations through loops that contain inter-node
synchronization points in the application.  Regions of code define
periods in the application during which control parameters are tuned
with the expectation that control parameters for a region can be
optimized independently of other regions.  In this way a region is
associated with a set of control parameters which can be optimized,
and future time intervals associated with the same region will benefit
from the application of control parameters which were determined from
tuning within previous occurrences of the region.  There are two
competing motivations for defining a region within the application.
The first is to identify a section of code that has distinct compute,
memory or network characteristics.  The second is to avoid defining
these regions such that they are nested within each other, as nested
regions are ignored, and only the outer most region is used for tuning
when nesting occurs.  Identifying progress within a region can be used
to alleviate load imbalance in the application under the assumption
that the region is bulk synchronous.  Under the assumption that the
application employs an iterative algorithm which synchronizes
periodically the user can alleviate load imbalance on larger time
scales than the regions provide.  This is done by marking iterations
through an outer loop in the application, the "epoch".

`WARNING:` All of the functions described herein require that MPI has
been initialized (via MPI_Init() or MPI_Init_thread()) and is properly
functioning before they are invoked.  These functions make use of various
MPI calls in their implementations and will return errors if MPI is not
initialized.

  * `geopm_prof_region`():
    registers an application region.  The _region_name_ and _hint_ are
    input parameters, and the _region_id_ is output.  The _region_id_
    can be used with `geopm_prof_enter`(), `geopm_prof_exit`(), and
    `geopm_prof_progress`() to reference the region.  If the region
    name has been previously registered, a call to this function will
    set the _region_id_ but the state associated with the region is
    unmodified.  The _region_name_ is used to determine the output
    _region_id_ and is also displayed in the profiling report to
    identify the region.  The _hint_ is one of the values given by the
    geopm_region_hint_e enum defined in _geopm.h_ which determines the
    initial control settings.  The following hints are supported:

    `GEOPM_REGION_HINT_UNKNOWN`: <br>
    Default value, provides no hint to the runtime.

    `GEOPM_REGION_HINT_COMPUTE`: <br>
    Compute limited region.

    `GEOPM_REGION_HINT_MEMORY`: <br>
    Memory bandwidth bound region.

    `GEOPM_REGION_HINT_NETWORK`: <br>
    Inter-node network dominated region, default for unnested MPI
    calls.

    `GEOPM_REGION_HINT_IO`: <br>
    Disk input/output dominated region.

    `GEOPM_REGION_HINT_SERIAL`: <br>
    Calculation that is not executed by a multi-threaded process (may
    be multi-process).

    `GEOPM_REGION_HINT_PARALLEL`: <br>
    Calculation that is executed by a multi-threaded process in a
    hybrid thread/process parallelism (e.g. MPI + OpenMP).

    `GEOPM_REGION_HINT_IGNORE`: <br>
    Region that control algorithms should ignore, and/or apply default
    policies.  This hint should be applied to application start up,
    shutdown, and events that do not happen on every trip through the
    outer loop.

  * `geopm_prof_enter`():
    is called by the compute application to mark the beginning of the
    profiled compute region associated with the _region_id_. If this
    call is made after entering a different region, but before exiting
    that region, the call is ignored and an error code is returned
    (i.e. nested regions are ignored).

  * `geopm_prof_exit`():
    is called by the compute application to mark the end of a compute
    region.  If this region is nested then the call is ignored and an
    error code is returned.

  * `geopm_prof_progress`():
    is called by the compute application in a single threaded context
    to signal the proportion of work completed for a region,
    _fraction_, where _fraction_ is between 0 and 1.  If the
    _region_id_ does not match the _region_id_ of the last call to
    geopm_prof_prof_enter() that was not nested, then this call is
    ignored and an error code is returned.

  * `geopm_prof_epoch`():
    is called once for each pass through a computational loop
    containing inter-node synchronization events.  This call acts as a
    beacon signal emitted by each MPI rank as it begins a loop
    iteration.  The divergence in the elapsed time between calls by
    different MPI ranks is interpreted as an imbalance to be corrected
    by the runtime.  This function may be called at different places
    in an application, but it should not be used to mark a loop that
    is nested inside of another loop which is also marked.  All calls
    to `geopm_prof_epoch`() made inside of a user defined region with
    the `GEOPM_REGION_HINT_IGNORE` hint bit set will be ignored.

  * `geopm_tprof_init`():
    resets the thread profile table, which extends the functionality
    of the profiling interface to report progress within threaded
    regions.  Along with `geopm_tprof_post()`, it provides an
    alternative to the `geopm_prof_progress()` method.  This should be
    called by all threads to set up the table after entering a thread
    parallel region.  This interface enables each thread to set
    the total number work units that the thread will be executing.
    This corresponds to the number of times that the
    `geopm_tprof_post`() interface will be called by the thread to
    report progress within the region.  If `geopm_tprof_init`() is
    called within a parallel region `geopm_tprof_init_loop`() should
    not be called.

  * `geopm_tprof_init_loop`():
    resets the thread profile table, which extends the functionality
    of the profiling interface to report progress within threaded
    regions containing parallel for loops.  Along with
    `geopm_tprof_post()`, it provides an alternative to the
    `geopm_prof_progress()` method.  This should be called by all
    threads to set up the table after entering a thread parallel
    region.  The interface assumes the calling thread is numbered
    _thread_idx_ from a gang with a fixed number of threads,
    _num_thread_, which are performing work sharing on a list of tasks
    _num_iter_ long (e.g. an omp parallel for loop with _num_iter_
    loops).  In the specific case of an OpenMP for loop statically
    scheduled with a chunk size then the _chunk_size_ argument can be
    specified to be non-zero and the work distribution among threads
    is explicitly calculated.  If `geopm_tprof_init_loop`() is called
    within a parallel region `geopm_tprof_init`() should not be
    called.

  * `geopm_tprof_post`():
    is called after a thread has completed each work unit to report
    progress.  Rather than a user-provided percentage of work complete,
    this method signals the completion of one work unit out of the total
    passed to `geopm_tprof_init()` or `geopm_tprof_init_loop()`.

## EXAMPLE

    #include <stdlib.h>
    #include <stdio.h>
    #include <string.h>
    #include <errno.h>
    #include <stdint.h>
    #include <mpi.h>
    #include <omp.h>

    #include "geopm.h"


    int main(int argc, char **argv)
    {
        int chunk_size = 0;
        int err = 0;
        int index = 0;
        int rank = 0;
        int num_iter = 100000000;
        double sum = 0.0;
        int num_thread = 0;
        int thread_idx = 0 ;
        uint64_t region_id = 0;

        err = MPI_Init(&argc, &argv);
        if (!err) {
    #pragma omp parallel
    {
            num_thread = omp_get_num_threads();
    }
            chunk_size = num_iter / num_thread;
            if (num_iter % num_thread) {
                ++chunk_size;
            }
        }
        if (!err) {
            err = geopm_prof_region("loop_0", GEOPM_REGION_HINT_UNKNOWN, &region_id);
        }
        MPI_Barrier(MPI_COMM_WORLD);
        if (!err) {
            err = geopm_prof_enter(region_id);
        }
        if (!err) {
    #pragma omp parallel default(shared) private(thread_idx, index)
    {
            thread_idx = omp_get_thread_num();
            geopm_tprof_init_loop(num_thread, thread_idx, num_iter, chunk_size);
    #pragma omp for reduction(+:sum) schedule(static, chunk_size)
            for (index = 0; index < num_iter; ++index) {
                sum += (double)index;
                geopm_tprof_post();
            }
    }
            err = geopm_prof_exit(region_id);
        }
        if (!err) {
            err = MPI_Comm_rank(MPI_COMM_WORLD, &rank);
        }
        if (!err && !rank) {
            printf("sum = %e\n\n", sum);
        }

        int tmp_err = MPI_Finalize();

        return err ? err : tmp_err;
    }

## ERRORS
All functions described on this man page return an error code.  See
**geopm_error(3)** for a full description of the error numbers and how
to convert them to strings.

## COPYRIGHT
Copyright (c) 2015, 2016, 2017, 2018, 2019, Intel Corporation. All rights reserved.

## SEE ALSO
**geopm(7)**,
**geopm_error(3)**

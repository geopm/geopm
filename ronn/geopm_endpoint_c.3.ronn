geopm_endpoint_c(3) -- dynamic policy control for resource management
=====================================================================

[//]: # (Copyright (c) 2015 - 2021, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## SYNOPSIS

**\#include [<geopm_endpoint.h>](https://github.com/geopm/geopm/blob/dev/src/geopm_endpoint.h)**

`Link with -lgeopmpolicy`

  * `int geopm_endpoint_create(`:
    `const char *`_endpoint_name_, <br>
    `struct geopm_endpoint_c **`_endpoint_`);`

  * `int geopm_endpoint_destroy(`:
    `struct geopm_endpoint_c *`_endpoint_`);`

  * `int geopm_endpoint_open(`:
    `struct geopm_endpoint_c *`_endpoint_`);`

  * `int geopm_endpoint_close(`:
    `struct geopm_endpoint_c *`_endpoint_`);`

  * `int geopm_endpoint_agent(`:
    `struct geopm_endpoint_c *`_endpoint_, <br>
    `size_t` _agent_name_max_, <br>
    `char *`_agent_name_`);`

  * `int geopm_endpoint_wait_for_agent_attach(`:
     `struct geopm_endpoint_c *`_endpoint_, <br>
     `double` timeout`);`

  * `int geopm_endpoint_stop_wait_loop(`:
    `struct geopm_endpoint_c *`_endpoint_`);`

  * `int geopm_endpoint_reset_wait_loop(`:
    `struct geopm_endpoint_c *`_endpoint_`);`

  * `int geopm_endpoint_profile_name(`:
    `struct geopm_endpoint_c *`_endpoint_, <br>
    `size_t` _profile_name_max_, <br>
    `char *`_profile_name_`);`

  * `int geopm_endpoint_num_node(`:
    `struct geopm_endpoint_c *`_endpoint_, <br>
    `int *`_num_node_`);`

  * `int geopm_endpoint_node_name(`:
    `struct geopm_endpoint_c *`_endpoint_, <br>
    `int` _node_idx_, <br>
    `size_t` _node_name_max_, <br>
    `char *`_node_name_`);`

  * `int geopm_endpoint_write_policy(`:
    `struct geopm_endpoint_c *`_endpoint_, <br>
    `size_t` _num_policy_, <br>
    `const double *`_policy_array_`);`

  * `int geopm_endpoint_read_sample(`:
    `struct geopm_endpoint_c *`_endpoint_, <br>
    `size_t` num_sample, <br>
    `double *`_sample_array_, <br>
    `double *`_sample_age_sec_`);`

## DESCRIPTION
The _geopm_endpoint_c_ interface can be utilized by a system resource manager
or parallel job scheduler to create, inspect, and destroy a GEOPM endpoint.
These endpoints can also be used to dynamically adjust the policy over the
compute application runtime.

For dynamic control, a daemon can use this interface to create and modify an
inter-process shared memory region on the compute node hosting the root MPI
process of the compute application.  The shared memory region is monitored by
the GEOPM runtime to enforce the policy across the entire MPI job allocation.

The endpoints can also be used to extract sample telemetry from the runtime.
This interface works in concert with the **geopm_agent_c(3)** interface for
inspecting the policy and sample parameters that pertain to the current agent.
One must utilize the agent interface to determine the number of sample
parameters provided by the agent and the number of policy values required by the
agent.

All functions described in this man page return an error code on failure and
zero upon success; see [ERRORS][] section below for details.


  * `geopm_endpoint_create`():
    will create an endpoint object.  This object will hold the
    necessary state for interfacing with the shmem regions.  The
    endpoint is stored in _endpoint_ and will be used with other
    functions in this interface.  The shared memory regions managed by
    this endpoint will have a substring of the shmem key that matches
    _endpoint_name_.  This will return zero on success indicating that
    the _endpoint_ struct can now be used.  _endpoint_ will
    be unmodified if an error occurs.

  * `geopm_endpoint_destroy`():
    will release resources associated with _endpoint_.  This will return zero
    on success indicating that the shmem regions were removed.  Otherwise an
    error code is returned.  This function will not delete any shmem regions.

  * `geopm_endpoint_open`():
    will create shared memory regions for passing policies to the
    Agent, and reading samples from the Agent.  These shmem regions
    are managed by the endpoint.  This will return zero on success
    indicating that the shmem regions were successfully created.  If
    the shmem key already exists, an error code of EEXIST is returned.

  * `geopm_endpoint_close`():
    will release shmem regions containing the substring
    _endpoint_name_.  This will return zero on success indicating that
    the shmem regions were removed.  Otherwise an error code is
    returned.

  * `geopm_endpoint_agent`():
    checks to see if an agent specified by _agent_name_ has attached
    to the _endpoint_.  The number of bytes reserved for _agent_name_
    is specified in _agent_name_max_.  Returns zero if the endpoint
    has an agent attached and the agent's name can be stored in the
    _agent_name_ buffer, or if no agent has attached.  Otherwise an
    error code is returned.  If no agent has attached, _agent_name_
    will be an empty string.  If no shmem region has been created with
    `geopm_endpoint_open()`, an error code is returned.

  * `geopm_endpoint_wait_for_agent_attach`():
    blocks until an agent has attached to the _endpoint_ or the
    _timeout_ in seconds is reached.  This will return zero on success
    indicating that the agent attached or the wait was cancelled.
    Otherwise an error code is returned.

  * `geopm_endpoint_stop_wait_loop`():
    stops any current wait loops the _endpoint_ is running.

  * `geopm_endpoint_reset_wait_loop`():
    resets the _endpoint_ to prepare for a subsequent call to
    `geopm_endpoint_wait_for_agent_attach()`.  This only needs to be
    called after calling `geopm_endpoint_stop_wait_loop()` once to reuse
    the endpoint for another agent.

  * `geopm_endpoint_profile_name`():
    provides the profile name of the attached agent in _profile_name_.
    The number of bytes reserved for _profile_name_ is specified in
    _profile_name_max_.  Returns zero if the endpoint has an agent
    attached and the profile name can be stored in the _profile_name_
    buffer.  Otherwise an error code is returned.  If no agent has
    attached, _profile_name_ will be an empty string.  If no shmem
    region has been created with `geopm_endpoint_open()`, an error
    code is returned.

  * `geopm_endpoint_num_node`():
    provides the number of nodes controlled by the agent attached to
    the _endpoint_ in _num_node_.  Returns zero on success, otherwise
    an error code is returned.  If no shmem region has been created
    with `geopm_endpoint_open()`, an error code is returned.

  * `geopm_endpoint_node_name`():
    provides the hostname of the _endpoint_ managed compute node in
    _node_name_.  The index is specified by _node_idx_.  The number of
    bytes reserved for _node_name_ is specified in _node_name_max_.
    Returns zero if the node name can be stored in the _node_name_
    buffer, otherwise an error code is returned.  If no shmem region
    has been created with `geopm_endpoint_open()`, an error code is
    returned.

  * `geopm_endpoint_write_policy`():
    sets the policy values for the agent within _endpoint_ to follow.
    These values provided in _policy_array_ will be consumed by the
    GEOPM runtime at the next iteration of the control loop.  The size
    of the _policy_array_ is given in _num_policy_.  Returns zero on
    success, otherwise an error code is returned.  Setting NAN for a
    policy value can be used to to indicate that the Agent should use
    an appropriate default value.  If no shmem region has been created
    with `geopm_endpoint_open()`, an error code is returned.

  * `geopm_endpoint_read_sample`():
    provides the sample telemetry from the _endpoint_'s agent in
    _sample_array_ and the amount of time that has passed since the
    agent last provided an update in _sample_age_sec_.  The number of
    samples is given in _num_sample_.  Returns zero on success,
    otherwise an error code is returned.  If no shmem region has been
    created with `geopm_endpoint_open()`, an error code is returned.

## ERRORS
All functions described on this man page return an error code.  See
**geopm_error(3)** for a full description of the error numbers and how
to convert them to strings.

## COPYRIGHT
Copyright (c) 2015 - 2021, Intel Corporation. All rights reserved.

## SEE ALSO
**geopm(7)**,
**geopm_error(3)**,
**geopm::Endpoint(3)**,
**geopmendpoint(1)**

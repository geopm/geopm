geopm_endpoint_c(3) -- dynamic policy control for resource management
=====================================================================

[//]: # (Copyright (c) 2015, 2016, 2017, 2018, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## SYNOPSIS

**\#include [<geopm_endpoint.h>](https://github.com/geopm/geopm/blob/dev/src/geopm_agent.h)**

`Link with -lgeopmpolicy`

  * `int geopm_endpoint_create(`:
    `struct geopm_endpoint_c **`_endpoint_`);`

  * `int geopm_endpoint_destroy(`:
    `struct geopm_endpoint_c *`_endpoint_`);`

  * `int geopm_endpoint_shmem_create(`:
    `struct geopm_endpoint_c *`_endpoint_, <br>
    `const char *`_endpoint_name_`);`

  * `int geopm_endpoint_shmem_destroy(`:
    `struct geopm_endpoint_c *`_endpoint_, <br>
    `const char *`_endpoint_name_`);`

  * `int geopm_endpoint_shmem_attach(`:
    `struct geopm_endpoint_c *`_endpoint_, <br>
    `const char *`_endpoint_name_`);`

  * `int geopm_endpoint_agent(`:
    `struct geopm_endpoint_c *`_endpoint_, <br>
    `size_t` _agent_name_max_, <br>
    `char *`_agent_name_`);`

  * `int geopm_endpoint_num_node(`:
    `struct geopm_endpoint_c *`_endpoint_, <br>
    `int *`_num_node_`);`

  * `int geopm_endpoint_node_name(`:
    `struct geopm_endpoint_c *`_endpoint_, <br>
    `int` _node_idx_, <br>
    `size_t` _node_name_max_, <br>
    `char *`_node_name_`);`

  * `int geopm_endpoint_agent_policy(`:
    `struct geopm_endpoint_c *`_endpoint_, <br>
    `const double *`_policy_array_`);`

  * `int geopm_endpoint_agent_sample(`:
    `struct geopm_endpoint_c *`_endpoint_, <br>
    `double *`_sample_array_, <br>
    `double *`_sample_age_sec_`);`

## DESCRIPTION
The _geopm_endpoint_c_ interface can be utilized by a system resource manager
or parallel job scheduler to create, inspect, and destroy a GEOPM endpoint.
These endpoints can also be used to dynamically adjust the policy over the
compute application runtime.

For dynamic control, a daemon can use this interface to create and modify an
inter-process shared memory region on the compute node hosting the root MPI
process of the compute application.  The shared memory region is monitored by
the GEOPM runtime to enforce the policy across the entire MPI job allocation.

The endpoints can also be used to extract sample telemetry from the runtime.
This interface works in concert with the **geopm_agent_c(3)** interface for
inspecting the policy and sample parameters that pertain to the current agent.
One must utilize the agent interface to determine the number of sample
parameters provided by the agent and the number of policy values required by the
agent.

All functions described in this man page return an error code on failure and
zero upon success; see [ERRORS][] section below for details.


  * `geopm_endpoint_create`():
    will create an endpoint object.  This object will hold the necessary state
    for interfacing with the shmem regions.  The endpoint is stored in
    _endpoint_ and will be used with other functions in this interface.  This
    will return zero on success indicating that the _endpoint_ struct can now be
    used.  It will return an error code of EEXIST if the shmem regions already
    exist. _endpoint_ will also be NULL if an error occurs.

  * `geopm_endpoint_destroy`():
    will release resources associated with _endpoint_.    This will return zero
    on success indicating that the shmem regions were removed.  Otherwise an
    error code is returned.  This function will not delete any shmem regions.

  * `geopm_endpoint_shmem_create`():
    will create shmem regions for passing policies to the Agent, and reading
    samples from the Agent.  These regions will have a substring of the shmem
    key that matches _endpoint_name_.  These shmem regions are managed by the
    endpoint.  This will return zero on success indicating that the shmem
    regions were successfully created.  If the shmem key already exists, an
    error code of EEXIST is returned.

  * `geopm_endpoint_shmem_destroy`():
    will release shmem regions containing the substring _endpoint_name_.  This
    will additionally send a signal to the agent that the manager is detaching
    and no longer requires sample updates.  This will return zero on success
    indicating that the shmem regions were removed.  Otherwise an error code is
    returned.

  * `geopm_endpoint_agent`():
    checks to see if an agent specified by _agent_name_ has attached to the
    _endpoint_.  The number of bytes reserved for _agent_name_ is specified in
    _agent_name_max_.  Returns zero if the endpoint has an agent attached and
    the agent's name can be stored in the _agent_name_ buffer.  Otherwise an
    error code is returned.  If no agent has attached, error code
    GEOPM_ERROR_NO_AGENT is returned.  If no shmem region has been attached to
    the endpoint an error code is returned.

  * `geopm_endpoint_num_node`():
    provides the number of nodes contained within the _endpoint_ in _num_node_.
    Returns zero on success, otherwise an error code is returned.

  * `geopm_endpoint_node_name`():
    provides the hostname of the _endpoint_ managed compute node in
    _node_name_.  The index is specified by _node_idx_.  The number of bytes
    reserved for _node_name_ is specified in _node_name_max_.  Returns zero on
    success, otherwise an error code is returned.

  * `geopm_endpoint_agent_policy`():
    sets the policy values for the agent within _endpoint_ to follow.  These
    values provided in _policy_array_ will be consumed by the GEOPM runtime at
    the next iteration of the control loop.  Returns zero on success, otherwise
    an error code is returned.  Setting NAN for a policy value can be used to
    to indicate that the Agent should use an appropriate default value.

  * `geopm_endpoint_agent_sample`():
    provides the sample telemetry from the _endpoint_'s agent in _sample_array_ and the
    amount of time that has passed since the agent last provided an update in
    _sample_age_sec_.  Returns zero on success, otherwise an error code is
    returned.

## ERRORS
All functions described on this man page return an error code.  See
**geopm_error(3)** for a full description of the error numbers and how
to convert them to strings.

## COPYRIGHT
Copyright (c) 2015, 2016, 2017, 2018, Intel Corporation. All rights reserved.

## SEE ALSO
**geopm(7)**,
**geopm_agent_energy_efficient(7)**,
**geopm_agent_monitor(7)**,
**geopm_agent_power_balancer(7)**,
**geopm_agent_power_governor(7)**,
**geopm_agent_c(3)**,
**geopm_error(3)**,
**geopmagent(1)**,
**geopmendpoint(1)**

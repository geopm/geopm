geopm_daemon_c(3) -- helpers for geopm daemons
==============================================

[//]: # (Copyright (c) 2015 - 2021, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## SYNOPSIS

**\#include [<geopm_daemon.h>](https://github.com/geopm/geopm/blob/dev/src/geopm_daemon.h)**

`Link with -lgeopmpolicy`

  * `int geopm_daemon_create(`:
    `const char *`_endpoint_name_, <br>
    `const char *`_policystore_path_, <br>
    `struct geopm_daemon_c **`_daemon_`);`

  * `int geopm_daemon_destroy(`:
    `struct geopm_daemon_c *`_daemon_`);`

  * `int geopm_daemon_update_endpoint_from_policystore(`:
    `struct geopm_daemon_c *`_daemon_, <br>
    `double` timeout`);`

  * `int geopm_daemon_stop_wait_loop(`:
    `struct geopm_daemon_c *`_daemon_`);`

  * `int geopm_daemon_reset_wait_loop(`:
    `struct geopm_daemon_c *`_daemon_`);`


## DESCRIPTION
The geopm_daemon_c interface contains common high-level utility
functions for interacting with the GEOPM Endpoint.  Its main purpose
is to provide the functionality needed for system resource manager
plugins or daemon processes, as well as handling clean up tasks.  The
underlying objects used by the daemon can also be used separately;
refer to **geopm_endpoint(3)** and **geopm_policystore(3)** for more
information.

All functions described in this man page return an error code on failure and
zero upon success; see [ERRORS][] section below for details.

  * `geopm_daemon_create`():
    will create a daemon object.  This object will hold the necessary
    state for interfacing with the endpoint and policystore.  The
    daemon object is stored in _daemon_ and will be used with other
    functions in this interface.  The shared memory regions managed by
    the internal endpoint will be created with the shmem key
    _endpoint_name_.  This will return zero on success indicating that
    the _daemon_ struct can now be used.  _daemon_ will be
    unmodified if an error occurs.

  * `geopm_daemon_destroy`():
    will release resources associated with _daemon_.  This will return
    zero on success indicating that the underlying endpoint and
    policystore connections were destroyed.  Otherwise an error code
    is returned.  This method removes any shared memory regions
    associated with the endpoint.

  * `geopm_daemon_update_endpoint_from_policystore`():
    looks up a policy in the PolicyStore given the attached
    Controller's agent and profile name, and writes it back into the
    policy side of the Endpoint.  The PolicyStore connection and
    Endpoint are owned by the given _daemon_ object.  If no policy is
    found, an error is returned.  If the Controller fails to attach
    within the _timeout_, or detaches while this function is running,
    no policy is written.

  * `geopm_daemon_stop_wait_loop`():
    exits early from any ongoing wait loops in the _daemon_, for
    example in a call to
    `geopm_daemon_update_endpoint_from_policystore()`.

  * `geopm_daemon_reset_wait_loop`():
    resets the _daemon_'s endpoint to prepare for a future wait loop.

## ERRORS
All functions described on this man page return an error code.  See
**geopm_error(3)** for a full description of the error numbers and how
to convert them to strings.

## COPYRIGHT
Copyright (c) 2015 - 2021, Intel Corporation. All rights reserved.

## SEE ALSO
**geopm(7)**,
**geopm_error(3)**,
**geopm_endpoint(3)**,
**geopm_policystore(3)**,
**geopm::Daemon(3)**,
**geopm::Endpoint(3)**,
**geopm::PolicyStore(3)**
geopm::CNLIOGroup(3) -- IOGroup for interaction with Compute Node Linux
=======================================================================

[//]: # (Copyright (c) 2015 - 2021, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## SYNOPSIS

**\#include [<geopm/CNLIOGroup.hpp>](https://github.com/geopm/geopm/blob/dev/src/CNLIOGroup.hpp)**

`Link with -lgeopm (MPI) or -lgeopmpolicy (non-MPI)`

  * `virtual set<string> signal_names(`:
    `void) const = 0`;

  * `virtual set<string> control_names(`:
    `void) const = 0`;

  * `virtual bool is_valid_signal(`:
    `const string &`_signal_name_`) const = 0;`

  * `virtual bool is_valid_control(`:
    `const string &`_control_name_`) const = 0;`

  * `virtual int signal_domain_type(`:
    `const string &`_signal_name_`) const = 0;`

  * `virtual int control_domain_type(`:
    `const string &`_control_name_`) const = 0;`

  * `virtual int push_signal(`:
    `const string &`_signal_name_`,` <br>
    `int` _domain_type_`,` <br>
    `int` _domain_idx_`) = 0`;

  * `virtual int push_control(`:
    `const string &`_control_name_`,` <br>
    `int` _domain_type_`,` <br>
    `int` _domain_idx_`) = 0`;

  * `virtual void read_batch(`:
    `void) = 0`;

  * `virtual void write_batch(`:
    `void) = 0`;

  * `virtual double sample(`:
    `int` _sample_idx_`) = 0;`

  * `virtual void adjust(`:
    `int` _control_idx_`,` <br>
    `double` _setting_`) = 0;`

  * `virtual double read_signal(`:
    `const string &`_signal_name_`,` <br>
    `int` _domain_type_`,` <br>
    `int` _domain_idx_`) = 0;`

  * `virtual void write_control(`:
    `const string &`_control_name_`,` <br>
    `int` _domain_type_`,` <br>
    `int` _domain_idx_`,` <br>
    `double` _setting_`) = 0;`

  * `virtual void save_control(`:
    `void) = 0`;

  * `virtual void restore_control(`:
    `void) = 0`;

  * `virtual function<double(const vector<double> &)> agg_function(`:
    `const string &`_signal_name_`) const = 0;`

  * `virtual string signal_description(`:
    `const string &`_signal_name_`) const = 0;`

  * `virtual string control_description(`:
    `const string &`_control_name_`) const = 0;`

  * `virtual string signal_behavior(`:
    `const string &`_signal_name_`) const = 0;`

  * `static std::string plugin_name(`:
    `void);`

  * `static std::unique_ptr<IOGroup> make_plugin(`:
    `void);`

## DESCRIPTION

The CNLIOGroup provides board-level energy counters from Compute Node Linux
as signals.  These values are obtained through the **proc(5)** filesystem.

## CLASS METHODS

  * `signal_names`():
    Returns the list of signal names provided by this IOGroup.

  * `control_names`():
    Does nothing; this IOGroup does not provide any controls.

  * `is_valid_signal`():
    Returns whether the given _signal_name_ is supported by the
    CNLIOGroup for the current platform.

  * `is_valid_control`():
    Returns false; this IOGroup does not provide any controls.

  * `signal_domain_type`():
    If the _signal_name_ is valid for this IOGroup, returns
    M_DOMAIN_BOARD.

  * `control_domain_type`():
    Returns M_DOMAIN_INVALID; this IOGroup does not provide any controls.

  * `push_signal`():
    Adds the signal specified by _signal_name_ to the list of signals
    to be read during read_batch().  If _domain_type_ is not
    M_DOMAIN_BOARD, throws an error.  The _domain_idx_ is ignored.

  * `push_control`():
    Should not be called; this IOGroup does not provide any controls.

  * `read_batch`():
    Read all pushed signals from the platform so that the next call to
    `sample`() will reflect the updated data.  The intention is that
    `read_batch`() will read the all of the `IOGroup`'s signals into memory once
    per call.

  * `write_batch`():
    Does nothing; this IOGroup does not provide any controls.

  * `sample`():
    Returns the value of the signal specified by a _signal_idx_
    returned from push_signal().  The value will have been updated by
    the most recent call to read_batch().

  * `adjust`():
    Should not be called; this IOGroup does not provide any controls.

  * `read_signal`():
    Immediately return the stored value for the given _signal_name_.
    If _domain_type_ is not M_DOMAIN_BOARD, throws an error.  The _domain_idx_
    is ignored.

  * `write_control`():
    Should not be called; this IOGroup does not provide any controls.

  * `save_control`():
    Does nothing; this IOGroup does not provide any controls.

  * `restore_control`():
    Does nothing; this IOGroup does not provide any controls.

  * `agg_function`():
    Return a function that should be used when aggregating the given
    signal.  For more information see **geopm::Agg(3)**.

  * `signal_description`():
    Returns a string description for _signal_name_, if defined.

  * `control_description`():
    Does nothing; this IOGroup does not provide any controls.

  * `signal_behavior`():
    Returns one of the IOGroup::signal_behavior_e values which
    describes about how a signal will change as a function of time.
    This can be used when generating reports to decide how to
    summarize a signal's value for the entire application run.

  * `plugin_name`():
    Returns the name of the plugin to use when this plugin is
    registered with the IOGroup factory; see
    **geopm::PluginFactory(3)** for more details.

  * `make_plugin`():
    Returns a pointer to a new CNLIOGroup object; see
    **geopm::PluginFactory(3)** for more details.

## COPYRIGHT
Copyright (c) 2015 - 2021, Intel Corporation. All rights reserved.

## SEE ALSO
**geopm(7)**,
**proc(5)**,
**geopm::IOGroup(3)**

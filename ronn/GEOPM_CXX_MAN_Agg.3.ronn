geopm::Agg(3) -- data aggregation functions
===========================================

[//]: # (Copyright (c) 2015 - 2021, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## SYNOPSIS

**\#include [<geopm/Agg.hpp>](https://github.com/geopm/geopm/blob/dev/src/Agg.hpp)**

`Link with -lgeopm (MPI) or -lgeopmpolicy (non-MPI)`

  * `static double Agg::sum(`:
    `const std::vector<double> &`_operands_`);`

  * `static double Agg::average(`:
    `const std::vector<double> &`_operands_`);`

  * `static double Agg::median(`:
    `const std::vector<double> &`_operands_`);`

  * `static double Agg::logical_and(`:
    `const std::vector<double> &`_operands_`);`

  * `static double Agg::logical_or(`:
    `const std::vector<double> &`_operands_`);`

  * `static double Agg::min(`:
    `const std::vector<double> &`_operands_`);`

  * `static double Agg::max(`:
    `const std::vector<double> &`_operands_`);`

  * `static double Agg::stddev(`:
    `const std::vector<double> &`_operands_`);`

  * `static double Agg::region_hash(`:
    `const std::vector<double> &`_operands_`);`

  * `static double Agg::region_hint(`:
    `const std::vector<double> &`_operands_`);`

  * `static double Agg::select_first(`:
    `const std::vector<double> &`_operands_`);`

  * `static double Agg::expect_same(`:
    `const std::vector<double> &`_operands_`);`

## DESCRIPTION
This class contains helper functions for aggregating multiple
floating-point samples to a single number.  They can be used to
simplify Agent implementation.

## CLASS METHODS

  * `sum`():
    Returns the sum of the input _operands_.

  * `average`():
    Returns the average of the input _operands_.

  * `median`():
    Returns the median of the input _operands_.

  * `logical_and`():
    Returns the output of logical AND over all the _operands_ where
    0.0 is false and all other values are true.

  * `logical_or`():
    Returns the output of logical OR over all the _operands_ where 0.0
    is false and all other values are true.

  * `min`():
    Returns the minimum value from the input _operands_.

  * `max`():
    Returns the maximum value from the input _operands_.

  * `stddev`():
    Returns the standard deviation of the input _operands_.

  * `region_hash`():
    If all _operands_ are the same, returns the common value.
    Otherwise, returns GEOPM_REGION_HASH_UNMARKED.  This is intended for
    situations where all ranks in a domain must be in the same region
    to exert control for that region.

  * `region_hint`():
    If all _operands_ are the same, returns the common value.
    Otherwise, returns GEOPM_REGION_HINT_UNKNOWN.  This is intended for
    situations where all ranks in a domain must be in the same region
    to exert control for that region.

  * `select_first`():
    Returns the first value in the _operands_ vector and ignores other
    values.  If the vector is empty, returns 0.0.

  * `expect_same`():
    Returns the common value if all _operands_ are the same, or NAN
    otherwise.  This function should not be used to aggregate values
    that may be interpreted as NAN such as raw register values or region
    IDs.

## COPYRIGHT
Copyright (c) 2015 - 2021, Intel Corporation. All rights reserved.

## SEE ALSO
**geopm(7)**,
**geopm_hash(3)**

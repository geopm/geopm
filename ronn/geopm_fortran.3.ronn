geopm_fortran(3) -- geopm fortran interface
===========================================

[//]: # (Copyright (c) 2015 - 2021, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## SYNOPSIS

`use geopm`

`Link with -lgeopmfort`

 * `integer(kind=c_int) function geopm_ctl_create(`_policy_`,` _shm_key_`,` _comm_`,` _ctl_`)`:
   `type(c_ptr), value, intent(in) ::` _policy_ <br>
   `character(kind=c_char), intent(in) ::` _sample_key_`(*)` <br>
   `integer(kind=c_int), value, intent(in) ::` _comm_ <br>
   `type(c_ptr), intent(out) ::` _ctl_

 * `integer(kind=c_int) function geopm_ctl_destroy(`_ctl_`)`:
   `type(c_ptr), value, intent(in) ::` _ctl_ <br>

 * `integer(kind=c_int) function geopm_ctl_run(`_ctl_`)`:
   `type(c_ptr), value, intent(in) ::` _ctl_

 * `integer(kind=c_int) function geopm_prof_create(`_prof_name_`,` _shm_key_`,` _comm_`,` _prof_`)`:
   `character(kind=c_char), intent(in) ::` _prof_name_`(*)` <br>
   `character(kind=c_char), intent(in) ::` _shm_key_`(*)` <br>
   `integer(kind=c_int), value, intent(in) ::` _comm_ <br>
   `type(c_ptr), intent(out) ::` _prof_

 * `integer(kind=c_int) function geopm_prof_destroy(`_prof_`)`:
   `type(c_ptr), value, intent(in) ::` _prof_

 * `integer(kind=c_int) function geopm_prof_default(`_prof_`)`:
   `type(c_ptr), value, intent(in) ::` _prof_

 * `integer(kind=c_int) function geopm_prof_region(`_prof_`,` _region_name_`,` _policy_hint_`,` _region_id_`)`:
   `type(c_ptr), value, intent(in) ::` _prof_ <br>
   `character(kind=c_char), intent(in) ::` _region_name_`(*)` <br>
   `integer(kind=c_int), value, intent(in) ::` _policy_hint_ <br>
   `integer(kind=c_int64_t), intent(out) ::` _region_id_

 * `integer(kind=c_int) function geopm_prof_enter(`_prof_`,` _region_id_`)`:
   `type(c_ptr), value, intent(in) ::` _prof_ <br>
   `integer(kind=c_int64_t), value, intent(in) ::` _region_id_

 * `integer(kind=c_int) function geopm_prof_exit(`_prof_`,` _region_id_`)`:
   `type(c_ptr), value, intent(in) ::` _prof_ <br>
   `integer(kind=c_int64_t), value, intent(in) ::` _region_id_

 * `integer(kind=c_int) function geopm_prof_epoch(`_prof_`)`:
   `type(c_ptr), value, intent(in) ::` _prof_

 * `integer(kind=c_int) function geopm_tprof_init(`_num_work_unit_`)`:
   `integer(kind=c_int32_t), value, intent(in) ::` _num_work_unit_ <br>

 * `integer(kind=c_int) function geopm_tprof_post()`:


## DESCRIPTION
This is the Fortran interface to the GEOPM library.  The documentation
for each function can found in the associated man page for the C
interface.  If the `--disable-fortran` configure flag is passed to the geopm
build then the Fortran interface will not be enabled.

Currently most of these Fortran functions call directly through to the
C interface through the ISO C bindings.  For this reason, care needs to
be taken when passing strings to the Fortran interface.  It is
important to wrap the Fortran string with `char_c_` and
`//c_null_char` when passing to as follows:

`ierr = geopm_prof_create(c_char_'profile_name'//c_null_char, c_char_''//c_null_char, MPI_COMM_WORLD, prof)`

For interfaces that accept or return a MPI communicator, the
translation of the communicator from Fortran to C is done
transparently.  In the future similar techniques may be used for
converting Fortran strings.

## FORTRAN MODULE
The GEOPM package installs a Fortran 90 module file which defines
these interfaces and can be imported with the `use geopm` command.
The install path for such modules has not been GNU standardized.  We
install the geopm Fortran 90 module to:

`<LIBDIR>/<FC>/modules/geopm-<ARCH>/geopm.mod`

where `<LIBDIR>` is the install location for libraries (e.g.
`/usr/lib64`), `<FC>` is the Fortran compiler executable name
(e.g. gfortran), and `<ARCH>` is the processor architecture
(e.g. x86_64).


## COPYRIGHT
Copyright (c) 2015 - 2021, Intel Corporation. All rights reserved.

## SEE ALSO
**geopm(7)**,
**geopm_ctl_c(3)**,
**geopm_error(3)**,
**geopm_prof_c(3)**
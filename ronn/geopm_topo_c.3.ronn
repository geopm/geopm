geopm_topo_c(3) -- query platform component topology
====================================================

[//]: # (Copyright (c) 2015 - 2021, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## SYNOPSIS

**\#include [<geopm_topo.h>](https://github.com/geopm/geopm/blob/dev/src/geopm_topo.h)**

`Link with -lgeopm (MPI) or -lgeopmpolicy (non-MPI)`

  * `int geopm_topo_num_domain(`:
    `int` _domain_type_`);`

  * `int geopm_topo_domain_idx(`:
    `int` _domain_type_, <br>
    `int` _cpu_idx_`);`

  * `int geopm_topo_num_domain_nested(`:
    `int` _inner_domain_, <br>
    `int` _outer_domain_`);`

  * `int geopm_topo_domain_nested(`:
    `int` _inner_domain_, <br>
    `int` _outer_domain_, <br>
    `int` _outer_idx_, <br>
    `size_t` _num_domain_nested_, <br>
    `int *`_domain_nested_`);`

  * `int geopm_topo_domain_name(`:
    `int` _domain_type_, <br>
    `size_t` _domain_name_max_, <br>
    `char *`_domain_name_`);`

  * `int geopm_topo_domain_type(`:
    `const char *`_domain_name_`);`

  * `int geopm_topo_create_cache(`:
    `void);`

## DOMAIN TYPES

The `geopm_domain_e` enum defines a set of values that correspond to
hardware components on the system:

  * `GEOPM_DOMAIN_INVALID` = -1:
    Indicates an invalid domain.

  * `GEOPM_DOMAIN_BOARD` = 0:
    All components on a user allocated compute node. There is only a
    single board per compute node, and every other domain is contained
    with the board domain.

  * `GEOPM_DOMAIN_PACKAGE` = 1:
    A collection of all the hardware present on a single processor
    package installed on a distinct socket of a motherboard.

  * `GEOPM_DOMAIN_CORE` = 2:
    Physical core, i.e. a group of associated hyper-threads

  * `GEOPM_DOMAIN_CPU` = 3:
    Linux logical CPU.  In practice, there is one logical CPU per
    hyperthread visible to the operating system.

  * `GEOPM_DOMAIN_BOARD_MEMORY` = 4:
    Standard off-package DIMM (DRAM or NAND).

  * `GEOPM_DOMAIN_PACKAGE_MEMORY` = 5:
    On-package memory (MCDRAM).

  * `GEOPM_DOMAIN_BOARD_NIC` = 6:
    Peripheral network interface controller not on the processor package.

  * `GEOPM_DOMAIN_PACKAGE_NIC` = 7:
    Network interface controller on the processor package.

  * `GEOPM_DOMAIN_BOARD_ACCELERATOR` = 8:
    Peripheral accelerator card not on the processor package.

  * `GEOPM_DOMAIN_PACKAGE_ACCELERATOR` = 9:
    Accelerator unit on the package (e.g on-package graphics).

  * `GEOPM_NUM_DOMAIN` = 10:
    The number of valid built-in domains.

## DESCRIPTION

The interfaces described in this man page are the C language bindings
for the **geopm::PlatformTopo(3)** C++ class.  Please refer to the
**geopm::PlatformTopo(3)** man page for a general description of the purpose,
goals and use case for this interface.

  * `geopm_topo_num_domain`():
     Returns the number of domains available on the system of type
     _domain_type_.  If the _domain_type_ is valid, but there are no
     domains of that type on the system, the return value is zero.  If
     the domain is not a valid domain defined by the `geopm_domain_e`
     enum then the function will return a negative error code:
     GEOPM_ERROR_INVALID.

  * `geopm_topo_domain_idx`():
    Returns the index of the domain of type _domain_type_ that is
    local to the Linux logical CPU _cpu_idx_.  The return value will
    be greater than or equal to zero and less than the value returned by
    `geopm_topo_num_domain`(_domain_type_) for valid input parameters.
    A negative error code is returned if _domain_type_ or _cpu_idx_
    are out of range: GEOPM_ERROR_INVALID.

  * `geopm_topo_num_domain_nested`():
    Returns the number of domains of type _inter_domain_ that are
    contained within each domain of _outer_domain_ type.  The return
    value is one if _inner_domain_ is equal to _outer_domain_.  A
    negative error code is returned if _inner_domain_ is not contained
    within _outer_domain_: GEOPM_ERROR_INVALID.  Any non-negative
    return value can be used to size the _domain_nested_ array that is
    passed to `geopm_topo_domain_nested`() with the same values for
    _inner_domain_ and _outer_domain_.

  * `geopm_topo_domain_nested`():
    Fills the output array _domain_nested_ with the domain indices of
    all of the _inner_domain_ types nested within the specific
    _outer_domain_ type indexed by _outer_idx_.  The
    _num_domain_nested_ defines the length of the _domain_nested_
    array must match the positive return value from
    `geopm_topo_num_domain_nested`(_inner_domain_, _outer_domain_).
    Zero is returned upon success.  A negative error code is returned
    if _inner_domain_ is not within _outer_domain_, or if _outer_idx_
    is not between zero and `geopm_topo_num_domain`(_outer_domain_).

  * `geopm_topo_domain_name`():
    Sets the _domain_name_ string to the name associated with the
    _domain_type_ selected from the `geopm_domain_e` enum.  At most
    _result_max_ bytes are written to the _domain_name_ string.
    Providing a string of `NAME_MAX` length (from `limits.h`) will be
    sufficient for storing any result.  If _result_max_ is too small
    to contain the domain name an error will occur.  Zero is returned
    on success and a negative error code is returned if any error
    occurs.

  * `geopm_topo_domain_type`():
    Returns the domain type that is associated with the provided
    _domain_name_ string.  This is the inverse function to
    `geopm_topo_domain_name`() and the input _domain_name_ must match
    the output from `geopm_topo_domain_name`() for a valid domain
    type.  If the string does not match any of the valid domain names,
    then GEOPM_DOMAIN_INVALID is returned.

  * `geopm_topo_create_cache`():
    Create a cache file for the **geopm::PlatformTopo(3)** object if
    one does not exist.  This cache file will be used by any calls to
    the other `geopm_topo_*()` functions documented here as well as
    any use of the GEOPM runtime.  File permissions of the cache file
    are set to "-rw-rw-rw-", i.e. 666. The path for the cache file is
    `/tmp/geopm-topo-cache`.  If the file exists no operation will be
    performed.  To force the creation of a new cache file,
    **unlink(3)** the existing cache file prior to calling this
    function.

## RETURN VALUE
If an error occurs in any call to an interface documented here, the
return value of the function will be a negative integer
corresponding to one of the error codes documented in
**geopm_error(3)**.

## SEE ALSO
**geopm(7)**,
**geopm_pio_c(3)**,
**geopm_error(3)**,
**geopm::PlatformTopo(3)**,
**geopm::PlatformIO(3)**,
**unlink(3)**
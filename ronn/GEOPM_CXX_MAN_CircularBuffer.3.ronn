geopm::CircularBuffer(3) -- generic circular buffer
===================================================

[//]: # (Copyright (c) 2015 - 2021, Intel Corporation)
[//]: # ()
[//]: # (Redistribution and use in source and binary forms, with or without)
[//]: # (modification, are permitted provided that the following conditions)
[//]: # (are met:)
[//]: # ()
[//]: # (    * Redistributions of source code must retain the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer.)
[//]: # ()
[//]: # (    * Redistributions in binary form must reproduce the above copyright)
[//]: # (      notice, this list of conditions and the following disclaimer in)
[//]: # (      the documentation and/or other materials provided with the)
[//]: # (      distribution.)
[//]: # ()
[//]: # (    * Neither the name of Intel Corporation nor the names of its)
[//]: # (      contributors may be used to endorse or promote products derived)
[//]: # (      from this software without specific prior written permission.)
[//]: # ()
[//]: # (THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS)
[//]: # ("AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT)
[//]: # (LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR)
[//]: # (A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT)
[//]: # (OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,)
[//]: # (SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT)
[//]: # (LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,)
[//]: # (DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY)
[//]: # (THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT)
[//]: # ((INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE)
[//]: # (OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.)

## SYNOPSIS

**\#include [<geopm/CircularBuffer.hpp>](https://github.com/geopm/geopm/blob/dev/src/CircularBuffer.hpp)**

  * `void set_capacity(`:
    `const unsigned int` _size_`);`

  * `void clear(`:
    `void);`

  * `int size(`:
    `void) const;`

  * `int capacity(`:
    `void) const;`

  * `void insert(`:
    `const T` _value_`);`

  * `const T& value(`:
    `const unsigned int` _index_`) const;`

  * `std::vector<T> make_vector(`:
    `void) const;`

## DESCRIPTION
The CircularBuffer container implements a fixed-size buffer. Once at
capacity, any new insertions cause the oldest entry to be dropped.

  * `set_capacity`():
  Resets the capacity of the circular buffer to _size_ without
  modifying its current contents.

  * `clear`():
  Clears all entries from the buffer.  The size becomes 0, but the
  capacity is unchanged.

  * `size`():
  Returns the number of items in the buffer.  This value will be less
  than or equal to the current capacity of the buffer.

  * `capacity`():
  Returns the current size of the circular buffer at the time of the
  call.

  * `insert`():
  Inserts _value_ into the buffer.  If the buffer is not full, the new
  value is simply added to the buffer. It the buffer is at capacity,
  The head of the buffer is dropped and moved to the next oldest entry
  and the new value is then inserted at the end of the buffer.

  * `value`():
  Accesses the contents of the circular buffer at _index_. Valid
  indices range from 0 to [size-1], where size is the number of valid
  entries in the buffer.  An attempt to retrieve a value for an out of
  bound index will throw a **geopm::Exception(3)** with an
  error_value() of GEOPM_ERROR_INVALID.

  * `make_vector`():
  Create a vector from the circular buffer contents.

## COPYRIGHT
Copyright (c) 2015 - 2021, Intel Corporation. All rights reserved.

## SEE ALSO
**geopm(7)**,
**geopm::Exception(3)**

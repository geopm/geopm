#!/usr/bin/env python
#
#  Copyright (c) 2013, 2014, 2015, 2016, Intel Corporation
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#      * Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#
#      * Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in
#        the documentation and/or other materials provided with the
#        distribution.
#
#      * Neither the name of Intel Corporation nor the names of its
#        contributors may be used to endorse or promote products derived
#        from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

"""
NAME
     track - A work tracking tool.

SYNOPSIS
    track -h | --help
        Print this help message.

    track -a <task> | --add <task>
        Create a new task.

    track -d <task> | --del <task>
        Delete a task.

    track -l | --list
        Print available tasks, star next to current task.

    track -L | --List
        Print available and closed tasks, star next to current task.

    track -s <task> | --switch <task>
        Switch to tracking a different task.

    track -e | --end
        Stop tracking.

    track -n | --note
        Add note to current task using editor.

    track -N "<note>" | --Note "<note>"
        Add note to current task from command line.

    track -p <task> | --print <task>
        Print specified task, if task is 'cur' prints the current
        task.

    track -P | --Print
        Print all unhidden tasks.

    track -c | --close
        Hide a task from display.

    track -o | --open
        Show a task that has been hidden.

    track -f | --filter <begin[:end]>
        Filter results to only print notes and time within the
        time window between begin and end in units of days ago:
        -f 14 Print the last two weeks.
        -f 14:7 would print the week prior to this one.
        -f 0.5 would print the last 12 hours.

    track -F | --Filter <begin[:end]>
        Filter results as with -f and --filter except that hidden
        tasks are shown.

    track -t <regex>| --tag <regex>
        Print the most recent note in the current task with a first
        line that matches regex.  If there is a colon in the first
        line comparison is up to the first colon.

    track -r | --rewind <minutes>
        Rewind current time specified number of minutes.

    track --commit <message>
        Calls git commit while prepending a workitem to the message if
        it exists, and makes a note about the commit in the tracker
        log.

DESCRIPTION
    Track serves two purposes: organizing notes and tracking time
    spent on tasks.  It has features for filtering notes by task, and
    by time interval.  It has features for adding deleting, hiding,
    and unhiding tasks.  The clock time when a command is executed can
    be modified with the rewind feature.  It also has a wrapper for
    git commit which will prepend a work item to the commit message
    and make a note in the tracker log of the commit details.

ENVIRONMENT
    TRACKER_PATH: path to tracker directory.
    TRACKER_DATA: path to task data (default ~/tracker/tasks).
    TRACKER_EDITOR, VISUAL, EDITOR: in that order of precedence
        control the editor for taking notes (default vi).

EXAMPLES
    track -a my-task -s my-task -n
        Add a task called my-task, start tracking it, and add a note
        to the task.

    track -r 30 -s my-interrupt
        Switched to task my-interrupt 30 minutes ago but forgot to
        start tracking the task.

    track -r 60 -e
        Stop tracking work 1 hour ago, e.g. I went to lunch and forgot
        to turn off tracking.

    track -f 0.5 -P
        Print all of the notes and time tracking from the last 12
        hours, i.e. what did i do today?

    track -F 14 -P | egrep '^Name|^Time|^Total time'
        Give break down of time for each of the tasks for the last
        two weeks, i.e. how did I spend my time this sprint?

    track -N 'workitem: hsd123456'
    track -t workitem
        Add a workitem to the current task, and then later query the
        current tasks' workitem.

AUTHOR
    Christopher M. Cantalupo

COPYRIGHT
    Copyright 2013 Intel Corporation All Rights Reserved.
"""


import os
import sys
import re
import time
import datetime
import tempfile
import errno
import subprocess
import shlex
import shutil
import getopt
import platform


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as err:
        if err.errno == errno.EEXIST and os.path.isdir(path):
            pass
        else: raise

def ctime_parse(ctime):
    return datetime.datetime.fromtimestamp(time.mktime(time.strptime(ctime.strip())))

def total_seconds(delta):
    return (delta.microseconds +
            (delta.seconds +
             delta.days * 24 * 3600) * 10**6) / 10**6

class NowBorg:
    _sharedState = {}
    def __init__(self):
        self.__dict__ = self._sharedState

class Now(object, NowBorg):
    def __init__(self):
        NowBorg.__init__(self)
        if self.__dict__ == {}:
            self._rewind = 0
            self._fix = None

    def now(self):
        if self._fix:
            return self._fix
        result = datetime.datetime.now()
        if self._rewind:
            result = result - datetime.timedelta(seconds=self._rewind)
        return result

    def fix(self):
        self._fix = datetime.datetime.now()
        if self._rewind:
            self._fix = self._fix - datetime.timedelta(seconds=self._rewind)

    def unfix(self):
        self._fix = None

    def rewind(self, seconds):
        self._rewind = self._rewind + seconds
        if self._fix:
            self._fix = self._fix - datetime.timedelta(seconds=seconds)

    def current(self):
        self._rewind = 0

class Task(object):
    def __init__(self, path):
        self._name = os.path.split(path)[1]
        self._path = path
        self._hidden = self._name.startswith('hid-')
        self._punch = []
        self._notes = []
        self._filter = (datetime.datetime.min, datetime.datetime.max)
        self.load()

    def __str__(self):
        if self.total() == 0:
            return ''
        result = []
        result.append('Name: {0}'.format(self._name))
        result.append('Time (hr): {0:.2f}'.format(self.total()/3600.0))
        result.append('Notes:')
        for note in self._notes:
            if note[0] >= self._filter[0] and note[0] <= self._filter[1]:
                result.append('Date: {0}'.format(note[0].ctime()))
                result.append(note[1])
                result.append('\n')
        return '\n'.join(result)

    def name(self):
        return self._name

    def load(self):
        try:
            fileName = os.path.join(self._path, 'punch.txt')
            fid = open(fileName)
            lines = fid.readlines()
            fid.close()
            for (line, index) in zip(lines, range(len(lines))):
                if '|' in line:
                    begin, end = line.split('|')
                    begin = ctime_parse(begin)
                    end = ctime_parse(end)
                    self._punch.append((begin, end))
                elif line.strip():
                    begin = line.strip()
                    begin = ctime_parse(begin)
                    self._punch.append(begin)

            fileName = os.path.join(self._path, 'notes.txt')
            fid  = open(fileName)
            notes = fid.read()
            fid.close()
            notes = notes.split('NOTE: ')[1:]
            for note in notes:
                noteLines = note.splitlines()
                time = ctime_parse(noteLines[0])
                note = '\n'.join(noteLines[1:])
                self._notes.append((time, note))
        except IOError:
            pass

    def store(self):
        result = []
        for pp in self._punch:
            if type(pp) is tuple:
                result.append('{0} | {1}'.format(pp[0].ctime(), pp[1].ctime()))
            else:
                result.append(pp.ctime())
        result.append('\n')
        mkdir_p(self._path)
        fid = open(os.path.join(self._path, 'punch.txt'), 'w')
        fid.write('\n'.join(result))
        fid.close()
        result = []
        for nn in self._notes:
            result.append('NOTE: {0}'.format(nn[0].ctime()))
            result.append(nn[1])
        fid = open(os.path.join(self._path, 'notes.txt'), 'w')
        fid.write('\n'.join(result))
        fid.close()

    def remove(self):
        userIn = ''
        while userIn.lower() not in ('yes', 'no'):
            sys.stdout.write("Remove task `{0}' and all files in task directory permanently? [yes/no] ".format(self._name))
            userIn = raw_input()
        if userIn.lower() == 'yes':
            shutil.rmtree(self._path)

    def hide(self):
        if self._hidden:
            return
        base, name = os.path.split(self._path)
        name = 'hid-{0}'.format(name)
        path = os.path.join(base, name)
        shutil.move(self._path, path)
        self._name = name
        self._path = path
        self._hidden = True

    def show(self):
        if not self._hidden:
            return
        base, name = os.path.split(self._path)
        if not name.startswith('hid-'):
            raise RuntimeError('Task {0} marked as hidden, but name does not start with "hid-"'.format(self._name))
        name = name[4:]
        path = os.path.join(base, name)
        shutil.move(self._path, path)
        self._name = name
        self._path = path
        self._hidden = False

    def note(self, msg=None):
        if msg is not None:
            self._notes.append((Now().now(), msg))
            return
        fid = tempfile.NamedTemporaryFile(delete=False)
        fileName = fid.name
        fid.close()
        editor = os.environ.get('TRACKER_EDITOR',
                 os.environ.get('VISUAL',
                 os.environ.get('EDITOR', 'vi')))
        cmd = '{0} {1}'.format(editor, fileName)
        if platform.platform().lower().startswith('win'):
            pid = subprocess.Popen(cmd, shell=True)
        else:
            pid = subprocess.Popen(shlex.split(cmd))
        out, err = pid.communicate()
        if pid.returncode != 0:
            raise subprocess.CalledProcessError(pid.returncode, cmd, err)
        fid = open(fileName)
        self._notes.append((Now().now(), fid.read()))
        fid.close()
        os.unlink(fileName)

    def start(self):
        now = Now().now()
        if not self._punch:
            self._punch = [now]
        elif type(self._punch[-1]) is tuple:
            if self._punch[-1][1] > now:
                raise RuntimeError('Rewound too far, task last ended after now')
            self._punch.append(now)
        else:
            sys.stderr.write('WARNING: Task {0} already started'.foramt(self._name))

    def stop(self):
        if not self._punch or type(self._punch[-1]) is tuple:
            raise RuntimeError('Task {0} not started, cannot stop'.format(self._name))
        update = (self._punch[-1], Now().now())
        if update[0] > update[1]:
            raise RuntimeError('Rewound too far, cannot end task before it began')
        self._punch[-1] = update

    def total(self):
        if len(self._punch) == 0:
            return 0
        if type(self._punch[-1]) is tuple:
            punch = self._punch
        else:
            punch = list(self._punch)
            punch[-1] = (punch[-1], Now().now())

        return sum([total_seconds(stop - start)
                     for (start,stop) in punch
                     if (start >= self._filter[0] and
                         stop <= self._filter[1])])

    def filter(self, begin, end=None):
        now = Now().now()
        if not end:
            end = datetime.datetime.max
        else:
            end = now - datetime.timedelta(float(end))
        if type(begin) is not datetime.datetime:
            begin = now - datetime.timedelta(float(begin))
        self._filter = (begin, end)

    def match(self, tag):
        regex = re.compile(tag)
        for note in reversed(self._notes):
            lines = note[1].splitlines()
            if lines:
                header = lines.pop(0)
                index = header.find(':')
                if index != -1:
                    lines.insert(0, header[index+1:].strip())
                    header = header[:index]
                header = header.strip()
                ss = regex.search(header)
                if ss and ss.group() == header:
                    result = '\n'.join(lines)
                    return result
        return ''

    def punch(self):
        return list(self._punch)

    def _is_current(self):
        if len(self._punch) == 0 or type(self._punch[-1]) is tuple:
            return False
        return True

class TaskCollection(object):
    def __init__(self, data):
        self._taskDir = data
        taskNames = [x for x in os.listdir(self._taskDir) if not x.startswith('.')]
        self._taskList = []
        self._current = None
        self._lastEntry = datetime.datetime.min
        for name in taskNames:
            task = Task(os.path.join(self._taskDir, name))
            punch = task.punch()
            if task._is_current():
                if self._current:
                    raise RuntimeError('Two tasks are current')
                self._current = task
                lastEntry = punch[-1]
            elif punch:
                lastEntry = punch[-1][1]
            else:
                lastEntry = datetime.datetime.min
            self._taskList.append(task)
            if lastEntry > self._lastEntry:
                self._lastEntry = lastEntry
        if self._lastEntry == datetime.datetime.min:
            self._lastEntry = None

    def __str__(self, name='all'):
        if name == 'cur':
            result = self._current.__str__()
        elif name != 'all':
            result = self.get(name).__str__()
        elif self._taskList:
            taskList = [task for task in self._taskList if not task._hidden and task.total() != 0]
            taskList = sorted(taskList, key=lambda task : task.total())
            result = [task.__str__() for task in taskList]
            totalTime = sum([task.total() for task in taskList])/3600.0
            result.append('Total time (hr): {0:.2f}'.format(totalTime))
            result = '\n********************************************************************************\n'.join(result)
        else:
            result = ''
        return result

    def __exit__(self, errType, value, traceback):
        for task in self._taskList:
            task.store()

    def __enter__(self):
        return self

    def list(self, showHidden=False):
        result = ['  {0}'.format(task.name()) for task in self._taskList if (showHidden or not task._hidden)]
        result.sort()
        if self._current:
            starredIndex = result.index('  {0}'.format(self._current.name()))
            result[starredIndex] = '* {0}'.format(result[starredIndex][2:])
        if self._lastEntry:
            delta = total_seconds(datetime.datetime.now() - self._lastEntry)/60.0
            result.append('Last entry: {0}, {1} minutes ago'.format(self._lastEntry, int(delta)))
        return '\n'.join(result)

    def switch(self, name='end'):
        if self._current:
            self._current.stop()
        if name != 'end':
            self._current = self.get(name)
            if self._current._hidden:
                raise RunTimeError('Cannot switch to hidden task')
            self._current.start()
        else:
            self._current = None
        self._lastEntry = Now().now()

    def append(self, name):
        if name in ('all', 'cur'):
            raise NameError('Task cannot be named "all" or "cur", these are reserved.')
        self._taskList.append(Task(os.path.join(self._taskDir, name)))

    def get(self, name=None):
        if name:
            names = [tt.name() for tt in self._taskList]
            return self._taskList[names.index(name)]
        else:
            return self._current

    def remove(self, name):
        task = self.get(name)
        self._taskList.remove(task)
        task.remove()

    def note(self, msg=None):
        if not self._current:
            raise RuntimeError('Not currently on a task, switch to new task')
        self._current.note(msg)

    def hide(self, name):
        task = self.get(name)
        if task == self._current:
            raise RuntimeError('Cannot hide current task')
        task.hide()

    def show(self, name):
        if name == 'all':
            result = []
            for task in self._taskList:
               if task.name().startswith('hid-'):
                   task.show()
                   result.append(task.name())
            return result
        else:
            task = self.get(name)
            task.show()

    def filter(self, begin, end=None):
        for task in self._taskList:
            task.filter(begin, end)

    def match(self, tag):
        if not self._current:
            return ''
        return self._current.match(tag)

    def commit(self, msg):
        workitem = self.match('workitem')
        if workitem:
            cmd = 'git commit -m "workitem: {0} {1}"'.format(workitem, msg)
        else:
            cmd = 'git commit -m "{0}"'.format(msg)
        pid = subprocess.Popen(shlex.split(cmd), stderr=subprocess.PIPE, stdout=subprocess.PIPE)
        out, err = pid.communicate()
        print out
        if pid.returncode:
            raise subprocess.CalledProcessError(pid.returncode, cmd, err)
        if err:
            sys.stderr.write(err)
        note = [os.getcwd()]
        note.extend(out.splitlines()[:2])
        note = '\n'.join(note)
        self.note(note)


class Track(object):
    def __init__(self):
        self._data = os.environ.get('TRACKER_DATA', os.path.join(os.path.expanduser('~'), 'tracker'))

    def git_template_path(self):
        return os.path.join(self._data, 'git_template')

    def tasks_path(self):
        return os.path.join(self._data, 'tasks')

    def init_git(self):
        cmd = "git config --global init.templatedir '{0}'".format(self.git_template_path())
        pid = subprocess.Popen(shlex.split(cmd))
        out, err = pid.communicate()
        if pid.returncode != 0:
            raise subprocess.CalledProcessError(pid.returncode, cmd, err)

    def init_bash(self):
        git_ps1_bash="""__git_ps1 ()
{
    local b
    local repo
    local task
    local task_s
    local uname
    local branch

    b="$(git symbolic-ref HEAD 2>/dev/null)";
    if [ -n "$b" ]; then
        if [[ $TRACKER != "off" ]]; then
            repo=$(basename `git rev-parse --show-toplevel`)
            task=$(track -l | grep '^\*' | sed -e 's|\* ||')
            task_s=$(echo $task | sed -e"s|$repo-||")
            uname=$(whoami)
            branch=$(git symbolic-ref --short HEAD | sed -e "s|$uname-||")
            if [[ $task_s != $branch ]]; then
                task=$repo-$branch
                track -a $task
                track -s $task
            fi
        fi
        printf " (%s)" "${b##refs/heads/}";
    fi
}
PS1='\u\[\e[1;30m\]@\[\e[1;35m\]\h\[\e[1;30m\]:\[\e[4;37m\]\w\[\e[0;33m\]$(__git_ps1)\[\e[0m\]]\[\e[1;37m\]\$\[\e[0m\] '
"""
        with open(os.path.expanduser('~/.bashrc'),'a') as fid:
            fid.write("# tracker prompt\n")
            fid.write(git_ps1_bash)

def main():
    try:
        shortOptions = 'hlLs:a:d:nN:ep:Pc:o:f:r:t:F:'
        longOptions = ['help', 'list', 'List', 'switch=', 'add=',
                       'del=', 'note', 'Note=', 'end', 'print=', 'Print',
                       'close=', 'open=', 'filter=', 'rewind=', 'tag=',
                       'commit=', 'Filter=', 'init']
        optList, pickleList = getopt.getopt(sys.argv[1:], shortOptions, longOptions)

    except getopt.GetoptError as err:
        sys.stderr.write('ERROR:  {0}\n'.format(err))
        sys.stderr.write('        For help run: {0} --help\n'.format(sys.argv[0]))
        sys.exit(2)

    track = Track()
    taskPath = track.tasks_path()
    mkdir_p(taskPath)

    doPrint = False
    doList = False
    doTag = False
    doHide = False
    doInit = False
    rewind = 0
    Now().fix()
    with TaskCollection(taskPath) as tasks:
        for opt, arg in optList:
            if opt in ('-h', '--help'):
                print __doc__
                sys.exit(0)
            elif opt in ('-l', '--list'):
                doList = True
                listArg = False
            elif opt in ('-L', '--List'):
                doList = True
                listArg = True
            elif opt in ('-s', '--switch'):
                tasks.switch(arg)
            elif opt in ('-a', '--add'):
                tasks.append(arg)
            elif opt in ('-d', '--del'):
                tasks.remove(arg)
            elif opt in ('-n', '--note'):
                tasks.note()
            elif opt in ('-N', '--Note'):
                tasks.note(arg)
            elif opt in ('-e', '--end'):
                tasks.switch('end')
            elif opt in ('-p', '--print'):
                doPrint = True
                printArg = arg
            elif opt in ('-P', '--Print'):
                doPrint = True
                printArg = 'all'
            elif opt in ('-c', '--close'):
                tasks.hide(arg)
            elif opt in ('-o', '--open'):
                tasks.show(arg)
            elif opt in ('-f', '--filter'):
                arg = arg.split(':')
                tasks.filter(*arg)
            elif opt in ('-F', '--Filter'):
                doHide = True
                hideList = tasks.show('all')
                arg = arg.split(':')
                tasks.filter(*arg)
            elif opt in ('-t', '--tag'):
                doTag = True
                tagArg = arg
            elif opt in ('-r', '--rewind'):
                rewind = float(arg)*60
                Now().rewind(rewind)
            elif opt in ('--commit'):
                tasks.commit(arg)
            elif opt in ('--init'):
                doInit = True
            else:
                sys.stderr.write('ERROR: Unhandled option {0}\n'.format(opt))
                sys.stderr.write('For help run: {0} --help\n'.format(sys.argv[0]))
                sys.exit(2)

        if doInit:
            track.init_git()
            track.init_bash()
        if doList:
            print tasks.list(listArg)
        if doPrint:
            print tasks.__str__(printArg)
        if doTag:
            print tasks.match(tagArg)
        if doHide:
            for name in hideList:
                tasks.hide(name)

if __name__ == '__main__':
    main()

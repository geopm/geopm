//
// Copyright (c) 2015 - 2024, Intel Corporation
// SPDX-License-Identifier: BSD-3-Clause
//

// TODO: ADD OVERVIEW COMMENT

syntax = "proto3";

message ReportList {
  string geopm_version = 1; // Version of the GEOPM service that is running
  repeated Report list = 2; // List of reports, one for each distinct policy setting on each host
}

message Report {
  Url host = 1; // Url of the host where the data was gathered
  TimeSpec begin = 2; // Time when last reqport was requested, or when policy was first set
  TimeSpec end = 3; // Time when this report was requested
  Policy policy = 5; // Agent policy including sample period
  repeated Stats stats = 6; // Stats for each metric measured by an agent
}

message Policy {
  string agent = 1; // Agent name
  double period = 2; // Sample period over which statistis are gathered
  string profile = 3; // String used to parameterize the agent without a value
  map<string, double> params = 4; // Map of parameter name to parameter value, the expected keys are agent specific
}

message Stats {
  string name = 1; // Agent defined name of the metric
  int64 count = 2; // Number of samples in the set
  double first = 3; // Value of the oldest sample in the set
  double last = 4; // Value of the newest sample in the set
  double min = 5; // Minimum value sampled
  double max = 6; // Maximum value sampled
  double mean = 7; // Average value sampled (first moment)
  double std = 8; // Estimate of the standard deviation of the samples (second moment)
  double skew = 9; // Estimate of the skew of the samples (third moment)
  double kurt = 10; // Estimate of the kurtosis of the samples (fourth moment)
  double lse_linear_0 = 11; // Least squares linear regression against time constant coefficient
  double lse_linear_1 = 12; // Least squares linear regression against time linear coefficient
}

message TimeSpec {
  uint64 sec = 1; // Seconds since the epoch as in Linux time spec
  uint64 nsec = 2; // Nano-seconds since last whole second as in Linux time spec
}

message Url {
  string url = 1; // Url of a host to connect with
}

message ReportRequest {

}


service GEOPMRuntime {

  // Configure Agent and start sampling data for reports.  Agent
  // determines which statistics will be included in the report and the
  // control algorithm that will be followed. The returned Policy is the
  // achieved Policy which may differ from the request due to system
  // constraints.
  rpc SetPolicy(Policy) returns(Policy);
  // Get statistics about sampled data since last call to GetReport()
  rpc GetReport(ReportRequest) returns(ReportList);
}

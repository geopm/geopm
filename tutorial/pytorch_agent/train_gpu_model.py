#!/usr/bin/env python3

#  Copyright (c) 2015 - 2021, Intel Corporation
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#      * Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#
#      * Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in
#        the documentation and/or other materials provided with the
#        distribution.
#
#      * Neither the name of Intel Corporation nor the names of its
#        contributors may be used to endorse or promote products derived
#        from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import torch
from torch import nn
import sys

import pandas as pd
import argparse

def main():
    parser = argparse.ArgumentParser(
        description='Run ML training based on GPU frequency sweep data.')
    parser.add_argument('input', help='HDF file containing the training data, '
                                      'generated by process_gpu_frequency_sweep.py.')
    parser.add_argument('output', help='Output directory for the tensorflow model.')
    parser.add_argument('--leave-app-out',
                        help='Leave the named app out of the training set')
    args = parser.parse_args()

    df_traces = pd.read_hdf(args.input)

    # Only train from the estimated region of interest
    df_traces = df_traces.loc[df_traces['is-roi']]

    X_columns = [
            'GPU_FREQUENCY_STATUS-board_accelerator-0',
            'GPU_POWER-board_accelerator-0',
            'GPU_UTILIZATION-board_accelerator-0',
            'GPU_COMPUTE_ACTIVITY-board_accelerator-0',
            'GPU_MEMORY_ACTIVITY-board_accelerator-0',
            'phi',
            ]

    y_columns = ['phi-freq']

    # Exclude rows missing data in any of the columns of interest. Otherwise,
    # NaN values propagate into every weight in the model.
    is_missing_data = df_traces[X_columns + y_columns].isna().sum(axis=1) > 0
    df_traces = df_traces.loc[~is_missing_data]

    # Ignore applications that are requested to be ignored by the user. This
    # may be useful for a case where the training data includes many
    # application sweeps. Then, a single sweep output can be re-used for many
    # models, and each model can ignore one application. When evaluating the
    # model's performance on an applcation, we should use a model that excludes
    # that application from the training set so we can get a better idea about
    # how the model might generalize to unseen workloads.
    if args.leave_app_out is not None:
        if args.leave_app_out not in df_traces['app-config'].unique():
            print('Error: {args.leave_app_out} not in the available training sets')
            exit(1)
        df_traces = df_traces.loc[df_traces['app-config'] != args.leave_app_out]

    df_train = df_traces
    df_x_train = df_train[X_columns]
    df_y_train = df_train[y_columns]
    df_y_train /= 1e9

    # The Normalization() function standardizes the input columns, so that
    # mean=0 and variance=1 for all columns of data. The linear transformation
    # to achieve those properties is saved as part of the model, and applied to
    # all incoming data automatically.
    #normalize_layer = preprocessing.Normalization()
    #normalize_layer.adapt(df_x_train)

    model = nn.Sequential(
                    nn.LayerNorm(len(X_columns)),
                    nn.Linear(len(X_columns), len(X_columns)),
                    nn.Sigmoid(),
                    nn.Linear(len(X_columns), len(X_columns)),
                    nn.Sigmoid(),
                    nn.Linear(len(X_columns), len(X_columns)),
                    nn.Sigmoid(),
                    nn.Linear(len(X_columns), 1)
            )

    loss_fn = nn.MSELoss()
    learning_rate = 1e-4
    optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

    #model.fit(df_x_train, df_y_train, epochs=5)
    x_train = torch.tensor(df_x_train.to_numpy()).float()
    y_train = torch.tensor(df_y_train.to_numpy()).float()

    n_samples, _ = x_train.shape

    #ML tutorial tensorflow setting equivalent
    bs = 32
    epoch_range = 5

    #bs = 50000
    #epoch_range = 1500
    print("bs:{}, epochs:{}, lr={}".format(bs, epoch_range, learning_rate))
    for epoch in range(epoch_range):
        model.train = True
        train_loss = 0
        for i in range((n_samples-1)//bs + 1):
            start_i = i*bs
            end_i = start_i + bs
            xb = x_train[start_i:end_i]
            yb = y_train[start_i:end_i]
            loss = loss_fn(model(xb), yb)
            train_loss += loss * len(xb)
            train_loss.detach()

            loss.backward()
            optimizer.step()
            optimizer.zero_grad()
        model.train = False
        if (epoch_range > 100 and epoch%50 == 0) or (epoch_range < 100):
            print(epoch, train_loss/n_samples)
        sys.stdout.flush()
    #print(",".join(), train_loss/n_samples, total_loss/n_test_samples)

    model_scripted = torch.jit.script(model)
    model_scripted.save(args.output)

if __name__ == "__main__":
    main()

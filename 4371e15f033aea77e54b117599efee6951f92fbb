{
  "comments": [
    {
      "key": {
        "uuid": "9da4f3e6_e805f0b1",
        "filename": "scripts/geopmpy/policy_store.py",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1011138
      },
      "writtenOn": "2019-08-27T23:04:40Z",
      "side": 1,
      "message": "worth getting rid of these repeated lines?  class member?",
      "range": {
        "startLine": 61,
        "startChar": 4,
        "endLine": 62,
        "endChar": 14
      },
      "revId": "4371e15f033aea77e54b117599efee6951f92fbb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0e8fab0_158c5e51",
        "filename": "scripts/geopmpy/policy_store.py",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1016629
      },
      "writtenOn": "2019-08-27T23:43:15Z",
      "side": 1,
      "message": "AFAIK, global declarations are only needed when writing a global variable, and accessing should be fine. Maybe these fall into the case where it isn\u0027t necessary. I\u0027ll see if I can just remove these.\n\nI had this as a class in an earlier revision, but global functions are preferred to more closely fit the style used in our other wrapper classes.",
      "parentUuid": "9da4f3e6_e805f0b1",
      "range": {
        "startLine": 61,
        "startChar": 4,
        "endLine": 62,
        "endChar": 14
      },
      "revId": "4371e15f033aea77e54b117599efee6951f92fbb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4657f0e8_fe922caa",
        "filename": "scripts/geopmpy/policy_store.py",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1016629
      },
      "writtenOn": "2019-08-27T23:50:57Z",
      "side": 1,
      "message": "Yep! Looks like they can be safely removed. Thanks!",
      "parentUuid": "c0e8fab0_158c5e51",
      "range": {
        "startLine": 61,
        "startChar": 4,
        "endLine": 62,
        "endChar": 14
      },
      "tag": "autogenerated:gerrit:newPatchSet",
      "revId": "4371e15f033aea77e54b117599efee6951f92fbb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5c6930d_db664115",
        "filename": "src/PolicyStoreImp.cpp",
        "patchSetId": 14
      },
      "lineNbr": 71,
      "author": {
        "id": 1011138
      },
      "writtenOn": "2019-08-27T23:04:40Z",
      "side": 1,
      "message": "why is this needed?",
      "range": {
        "startLine": 71,
        "startChar": 4,
        "endLine": 71,
        "endChar": 16
      },
      "revId": "4371e15f033aea77e54b117599efee6951f92fbb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2448b0f_e1772a8f",
        "filename": "src/PolicyStoreImp.cpp",
        "patchSetId": 14
      },
      "lineNbr": 71,
      "author": {
        "id": 1016629
      },
      "writtenOn": "2019-08-27T23:43:15Z",
      "side": 1,
      "message": "It\u0027s generally useful for better compiler warnings. E.g. more chance to get warnings about unreachable code that follows a call to a noreturn function, and less chance to get false alarms for \u0027function is missing a return statement\u0027 when a noreturn function is called in that path of execution.\n\nA compiler can probably figure it out without a hint in this particular case since its a static function and nothing too complex is happening here. The noreturn annotation makes the intent explicit to other readers of the code.",
      "parentUuid": "a5c6930d_db664115",
      "range": {
        "startLine": 71,
        "startChar": 4,
        "endLine": 71,
        "endChar": 16
      },
      "revId": "4371e15f033aea77e54b117599efee6951f92fbb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "448597d1_4f5effd7",
        "filename": "test/PolicyStoreImpTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 72,
      "author": {
        "id": 1012567
      },
      "writtenOn": "2019-08-27T00:34:21Z",
      "side": 1,
      "message": "An alternative would be to change the agent factory be a member and inject a new one in the test constructor.",
      "revId": "4371e15f033aea77e54b117599efee6951f92fbb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "440d66ff_cd8a58a8",
        "filename": "test/PolicyStoreImpTest.cpp",
        "patchSetId": 14
      },
      "lineNbr": 72,
      "author": {
        "id": 1016629
      },
      "writtenOn": "2019-08-27T21:03:03Z",
      "side": 1,
      "message": "I\u0027d prefer to keep it this way since it\u0027s a mild, test-only inconvenience. Plugin factories are treated like singletons everywhere else in the project, so it would feel out of place to make PolicyStoreImp hold on to one.",
      "parentUuid": "448597d1_4f5effd7",
      "revId": "4371e15f033aea77e54b117599efee6951f92fbb",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "e6de39fa_703bc4cc",
        "filename": "src/SharedMemory.cpp",
        "patchSetId": 7
      },
      "lineNbr": 140,
      "author": {
        "id": 1016629
      },
      "writtenOn": "2019-09-05T21:39:52Z",
      "side": 1,
      "message": "SharedMemoryImp::unlink() is being manually called in a lot of places where SharedMemoryImp goes out of scope. Could that be avoided for most or all cases? e.g. call unlink on descruction, but make unlink do nothing if it has already been done on this instance.",
      "revId": "bf82decf9a1f19ea764ccf7f5273ab5115158ad2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "312f42c9_bfd9a542",
        "filename": "src/SharedMemory.cpp",
        "patchSetId": 7
      },
      "lineNbr": 140,
      "author": {
        "id": 1012567
      },
      "writtenOn": "2019-09-05T22:14:04Z",
      "side": 1,
      "message": "This method was added for the cases where the SharedMemoryImp goes out of scope, but we don\u0027t want to unlink the shared memory yet. Another suggestion (which I\u0027m not crazy about) is to have a bool in the constructor for whether the dtor should call shm_unlink.",
      "parentUuid": "e6de39fa_703bc4cc",
      "revId": "bf82decf9a1f19ea764ccf7f5273ab5115158ad2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abf34b5a_69d94691",
        "filename": "src/SharedMemory.cpp",
        "patchSetId": 7
      },
      "lineNbr": 140,
      "author": {
        "id": 1016629
      },
      "writtenOn": "2019-09-06T15:05:40Z",
      "side": 1,
      "message": "Ah, right. That makes sense. We probably want exactly one type of endpoint (whichever is the \u0027owner\u0027) to control whether additional endpoints can find the link.\n\nI guess that would make the common case the one where you don\u0027t want to unlink. It just looks different from that in this diff because of unit tests using it.",
      "parentUuid": "312f42c9_bfd9a542",
      "revId": "bf82decf9a1f19ea764ccf7f5273ab5115158ad2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0a6edb6_60fb7179",
        "filename": "src/SharedMemory.cpp",
        "patchSetId": 7
      },
      "lineNbr": 140,
      "author": {
        "id": 1012567
      },
      "writtenOn": "2019-09-06T21:43:24Z",
      "side": 1,
      "message": "I think we can use SharedMemoryUser to unlink shared memory regions whose original creator\u0027s process has ended.  The \"owner\" is a little unclear because both sides can unlink.\n\nThe intended use case is:\n\u003e geopmendpoint --create ep1\n# /dev/shm/ep1 is created\n# geopmendpoint process ends\n# controller comes up reads from /dev/shm/ep1\n# .. some time later\n\u003e geopmendpoint --destroy ep2\n# /dev/shm/ep1 is gone",
      "parentUuid": "abf34b5a_69d94691",
      "revId": "bf82decf9a1f19ea764ccf7f5273ab5115158ad2",
      "serverId": "d5d70762-12d0-45a1-890d-524b12d3f735",
      "unresolved": false
    }
  ]
}
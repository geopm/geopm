From 8bfbec360c47e58ead5f06547721baee0836df20 Mon Sep 17 00:00:00 2001
From: "Geltz, Brad" <brad.geltz@intel.com>
Date: Wed, 26 Oct 2016 14:42:12 -0700
Subject: [PATCH 2/3] Marked up MiniFE code for use with GEOPM.

#  Copyright (c) 2015, 2016, 2017, 2018, 2019, 2020, Intel Corporation
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#      * Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#
#      * Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in
#        the documentation and/or other materials provided with the
#        distribution.
#
#      * Neither the name of Intel Corporation nor the names of its
#        contributors may be used to endorse or promote products derived
#        from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

Signed-off-by: Geltz, Brad <brad.geltz@intel.com>
---
 SparseMatrix_functions.hpp | 14 ++++++++++++++
 Vector_functions.hpp       | 19 +++++++++++++++++++
 cg_solve.hpp               | 13 +++++++++++++
 makefile                   |  4 ++--
 4 files changed, 48 insertions(+), 2 deletions(-)

diff --git a/SparseMatrix_functions.hpp b/SparseMatrix_functions.hpp
index 1af3fad..1eb5b05 100644
--- a/SparseMatrix_functions.hpp
+++ b/SparseMatrix_functions.hpp
@@ -44,6 +44,10 @@
 #include <exchange_externals.hpp>
 #include <mytimer.hpp>
 
+#ifndef NO_GEOPM
+#include "geopm.h"
+#endif
+
 #ifdef MINIFE_HAVE_TBB
 #include <LockingMatrix.hpp>
 #endif
@@ -552,6 +556,7 @@ void operator()(MatrixType& A,
             VectorType& x,
             VectorType& y)
 {
+// Phase 1: Halo exchange (MPI_Send/MPI_Irecv between neighboring ranks)
   exchange_externals(A, x);
 
   typedef typename MatrixType::ScalarType ScalarType;
@@ -565,7 +570,13 @@ void operator()(MatrixType& A,
   const ScalarType* xcoefs = &x.coefs[0];
         ScalarType* ycoefs = &y.coefs[0];
   ScalarType beta = 0;
+// Phase 2: Local matrix-vector multiplication (OpenMP within rank)
 
+#ifndef NO_GEOPM
+  uint64_t R_ID;
+  geopm_prof_region("PHASE_MATVEC", 0, &R_ID);
+  geopm_prof_enter(R_ID);
+#endif
   #pragma omp parallel
   {
   #pragma omp for
@@ -579,6 +590,9 @@ void operator()(MatrixType& A,
     ycoefs[row] = sum;
   }
   }
+#ifndef NO_GEOPM
+  geopm_prof_exit(R_ID);
+#endif
 }
 };
 
diff --git a/Vector_functions.hpp b/Vector_functions.hpp
index 956d126..da0d04b 100644
--- a/Vector_functions.hpp
+++ b/Vector_functions.hpp
@@ -46,6 +46,9 @@
 #include <WaxpbyOp.hpp>
 #include <DotOp.hpp>
 
+#ifndef NO_GEOPM
+#include "geopm.h"
+#endif
 
 namespace miniFE {
 
@@ -148,6 +151,11 @@ void
   const ScalarType* ycoefs = &y.coefs[0];
         ScalarType* wcoefs = &w.coefs[0];
 
+#ifndef NO_GEOPM
+  uint64_t R_ID;
+  geopm_prof_region("PHASE_WAXPBY", 0, &R_ID);
+  geopm_prof_enter(R_ID);
+#endif
   #pragma omp parallel
   {
   #pragma omp for
@@ -155,6 +163,9 @@ void
     wcoefs[i] = alpha*xcoefs[i] + beta*ycoefs[i];
   }
   }
+#ifndef NO_GEOPM
+  geopm_prof_exit(R_ID);
+#endif
 }
 
 //Like waxpby above, except operates on two sets of arguments.
@@ -221,6 +232,11 @@ typename TypeTraits<typename Vector::ScalarType>::magnitude_type
   const Scalar* ycoefs = &y.coefs[0];
   magnitude result = 0;
 
+#ifndef NO_GEOPM
+  uint64_t R_ID;
+  geopm_prof_region("PHASE_DOT", 0, &R_ID);
+  geopm_prof_enter(R_ID);
+#endif
   #pragma omp parallel
   {
   #pragma omp for reduction(+:result)
@@ -228,6 +244,9 @@ typename TypeTraits<typename Vector::ScalarType>::magnitude_type
     result += xcoefs[i]*ycoefs[i];
   }
   }
+#ifndef NO_GEOPM
+  geopm_prof_exit(R_ID);
+#endif
 
 #ifdef HAVE_MPI
   magnitude local_dot = result, global_dot = 0;
diff --git a/cg_solve.hpp b/cg_solve.hpp
index ee7ba93..1a88507 100644
--- a/cg_solve.hpp
+++ b/cg_solve.hpp
@@ -37,6 +37,10 @@
 
 #include <outstream.hpp>
 
+#ifndef NO_GEOPM
+#include "geopm.h"
+#endif
+
 namespace miniFE {
 
 template<typename Scalar>
@@ -149,13 +153,19 @@ cg_solve(OperatorType& A,
 
   for(LocalOrdinalType k=1; k <= max_iter && normr > tolerance; ++k) {
 
+#ifndef NO_GEOPM
+geopm_prof_epoch();
+#endif
     if (k == 1) {
+// Phase 3: WAXPBY: Sums two scaled vectors into a vector (OpenMP within rank)
       TICK(); waxpby(one, r, zero, r, p); TOCK(tWAXPY);
     }
     else {
       oldrtrans = rtrans;
+// Phase 4: Vector dot product (OpenMP within rank + global MPI_Allreduce)
       TICK(); rtrans = dot(r, r); TOCK(tDOT);
       magnitude_type beta = rtrans/oldrtrans;
+// Phase 3: WAXPBY: Sums two scaled vectors into a vector (OpenMP within rank)
       TICK(); waxpby(one, r, beta, p, p); TOCK(tWAXPY);
     }
 
@@ -173,7 +183,9 @@ cg_solve(OperatorType& A,
     p_ap_dot = matvec_and_dot(A, p, Ap);
     TOCK(tMATVECDOT);
 #else
+// phases 1 and 2 are invoked in matvec()
     TICK(); matvec(A, p, Ap); TOCK(tMATVEC);
+// Phase 4: Vector dot product (OpenMP within rank + global MPI_Allreduce)
     TICK(); p_ap_dot = dot(Ap, p); TOCK(tDOT);
 #endif
 
@@ -206,6 +218,7 @@ cg_solve(OperatorType& A,
     fused_waxpby(one, x, alpha, p, x, one, r, -alpha, Ap, r);
     TOCK(tWAXPY);
 #else
+// Phase 3: WAXPBY: Sums two scaled vectors into a vector (OpenMP within rank)
     TICK(); waxpby(one, x, alpha, p, x);
             waxpby(one, r, -alpha, Ap, r); TOCK(tWAXPY);
 #endif
diff --git a/makefile b/makefile
index feb3864..197e70e 100644
--- a/makefile
+++ b/makefile
@@ -19,11 +19,11 @@ CXXFLAGS = -O3 -fopenmp
 # the exchange_externals function.
 
 # CPPFLAGS = -I. -I../utils -I../fem $(MINIFE_TYPES) -DMINIFE_DEBUG -DHAVE_MPI -DMPICH_IGNORE_CXX_SEEK
-CPPFLAGS = -I. -I../utils -I../fem $(MINIFE_TYPES) $(MINIFE_MATRIX_TYPE) -DHAVE_MPI -DMPICH_IGNORE_CXX_SEEK
+CPPFLAGS = -I. -I../utils -I../fem $(MINIFE_TYPES) $(MINIFE_MATRIX_TYPE) -DHAVE_MPI -DMPICH_IGNORE_CXX_SEEK -I${HOME}/build/geopm/include
 
 #LDFLAGS=$(IPM)
 LDFLAGS=
-LIBS=
+LIBS=${HOME}/build/geopm/lib/libgeopm.so
 
 # The MPICH_IGNORE_CXX_SEEK macro is required for some mpich versions,
 # such as the one on my cygwin machine.
-- 
1.9.1


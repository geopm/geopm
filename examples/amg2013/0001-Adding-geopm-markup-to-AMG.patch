From 40bfe482ae569ebb6c3c52c7386c383e7c2af438 Mon Sep 17 00:00:00 2001
From: "Steve S. Sylvester" <steve.s.sylvester@intel.com>
Date: Fri, 18 Nov 2016 14:57:29 -0800
Subject: [PATCH] Adding geopm markup to AMG.

#  Copyright (c) 2015, 2016, 2017, 2018, Intel Corporation
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#      * Redistributions of source code must retain the above copyright
#        notice, this list of conditions and the following disclaimer.
#
#      * Redistributions in binary form must reproduce the above copyright
#        notice, this list of conditions and the following disclaimer in
#        the documentation and/or other materials provided with the
#        distribution.
#
#      * Neither the name of Intel Corporation nor the names of its
#        contributors may be used to endorse or promote products derived
#        from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY LOG OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

Signed-off-by: Steve S. Sylvester <steve.s.sylvester@intel.com>
---
 Makefile.include |  4 ++--
 krylov/gmres.c   | 50 +++++++++++++++++++++++++++++++++++++++++
 krylov/pcg.c     | 68 +++++++++++++++++++++++++++++++++++++++++++++++++++++---
 3 files changed, 117 insertions(+), 5 deletions(-)

diff --git a/Makefile.include b/Makefile.include
index e0d38a1..1ba7468 100644
--- a/Makefile.include
+++ b/Makefile.include
@@ -24,9 +24,9 @@ CC = mpicc
 # Use 64-bit integers for global variables (needed for large problems
 #	with more than 2 billion variables)
 #   add '-DHYPRE_LONG_LONG'  to 'INCLUDE_CFLAGS'
-INCLUDE_CFLAGS = -O2 -DTIMER_USE_MPI -DHYPRE_USING_OPENMP -DHYPRE_LONG_LONG -DHYPRE_NO_GLOBAL_PARTITION -fopenmp
+INCLUDE_CFLAGS = -O2 -DTIMER_USE_MPI -DHYPRE_USING_OPENMP -DHYPRE_LONG_LONG -DHYPRE_NO_GLOBAL_PARTITION -fopenmp -xMIC-AVX512 -I$(HOME)/build/geopm/include -DGEOPM
 
 # set link flags here
 #INCLUDE_LFLAGS = -lm -openmp -qsmp
-INCLUDE_LFLAGS = -lm  -fopenmp
+INCLUDE_LFLAGS = -lm  -fopenmp -L$(HOME)/build/geopm/lib -lgeopm
 
diff --git a/krylov/gmres.c b/krylov/gmres.c
index 04064d4..b27f457 100644
--- a/krylov/gmres.c
+++ b/krylov/gmres.c
@@ -21,6 +21,10 @@
 #include "krylov.h"
 #include "utilities.h"
 
+#ifdef GEOPM
+#include "geopm.h"
+#endif
+
 /*--------------------------------------------------------------------------
  * hypre_GMRESFunctionsCreate
  *--------------------------------------------------------------------------*/
@@ -268,6 +272,9 @@ hypre_GMRESSolve(void  *gmres_vdata,
    double     weight;
    double     r_norm_0;
    double     relative_error;
+#ifdef GEOPM
+   uint64_t   region_id = 0;
+#endif
 
    (gmres_data -> converged) = 0;
    /*-----------------------------------------------------------------------
@@ -468,21 +475,60 @@ hypre_GMRESSolve(void  *gmres_vdata,
       	t = 1.0 / r_norm;
 	(*(gmres_functions->ScaleVector))(t,p[0]);
 	i = 0;
+
 	while (i < k_dim && ( (r_norm/den_norm > epsilon || iter < min_iter)
                          || ((rel_change) && relative_error > epsilon) )
                          && iter < max_iter)
 	{
 		i++;
 		iter++;
+
+#ifdef GEOPM
+        geopm_prof_epoch();
+        geopm_prof_region("PHASE_CLEARVECTOR", 0, &region_id);
+        geopm_prof_enter(region_id);
+#endif
 		(*(gmres_functions->ClearVector))(r);
+#ifdef GEOPM
+        geopm_prof_exit(region_id);
+#endif
+
+#ifdef GEOPM
+        geopm_prof_region("PHASE_PRECONDITION", 0, &region_id);
+        geopm_prof_enter(region_id);
+#endif
 		precond(precond_data, A, p[i-1], r);
+#ifdef GEOPM
+        geopm_prof_exit(region_id);
+#endif
+
+#ifdef GEOPM
+        geopm_prof_region("PHASE_MATVEC", 0, &region_id);
+        geopm_prof_enter(region_id);
+#endif
 		(*(gmres_functions->Matvec))(matvec_data, 1.0, A, r, 0.0, p[i]);
+#ifdef GEOPM
+        geopm_prof_exit(region_id);
+#endif
+
+#ifdef GEOPM
+        geopm_prof_region("PHASE_DOTPRODUCTS", 0, &region_id);
+        geopm_prof_enter(region_id);
+#endif
 		/* modified Gram_Schmidt */
 		for (j=0; j < i; j++)
 		{
 			hh[j][i-1] = (*(gmres_functions->InnerProd))(p[j],p[i]);
 			(*(gmres_functions->Axpy))(-hh[j][i-1],p[j],p[i]);
 		}
+#ifdef GEOPM
+        geopm_prof_exit(region_id);
+#endif
+
+#ifdef GEOPM
+        geopm_prof_region("PHASE_RESCALING", 0, &region_id);
+        geopm_prof_enter(region_id);
+#endif
 		t = sqrt((*(gmres_functions->InnerProd))(p[i],p[i]));
 		hh[i][i-1] = t;	
 		if (t != 0.0)
@@ -539,6 +585,10 @@ hypre_GMRESSolve(void  *gmres_vdata,
 		      break;
 		   }
         	}
+#ifdef GEOPM
+        geopm_prof_exit(region_id);
+#endif
+
 
 	}
 	/* now compute solution, first solve upper triangular system */
diff --git a/krylov/pcg.c b/krylov/pcg.c
index a3eed5b..2c832a5 100644
--- a/krylov/pcg.c
+++ b/krylov/pcg.c
@@ -30,6 +30,9 @@
 
 #include "krylov.h"
 #include "utilities.h"
+#ifdef GEOPM
+#include "geopm.h"
+#endif
 
 /*--------------------------------------------------------------------------
  * hypre_PCGFunctionsCreate
@@ -306,6 +309,9 @@ hypre_PCGSolve( void *pcg_vdata,
    int             i = 0;
    int             ierr = 0;
    int             my_id, num_procs;
+#ifdef GEOPM
+   uint64_t        region_id = 0;
+#endif
 
    (pcg_data -> converged) = 0;
 
@@ -457,10 +463,21 @@ hypre_PCGSolve( void *pcg_vdata,
    while ((i+1) <= max_iter)
    {
       i++;
-
+#ifdef GEOPM
+        geopm_prof_epoch();
+        geopm_prof_region("PHASE_MATVEC", 0, &region_id);
+        geopm_prof_enter(region_id);
+#endif
       /* s = A*p */
       (*(pcg_functions->Matvec))(matvec_data, 1.0, A, p, 0.0, s);
+#ifdef GEOPM
+        geopm_prof_exit(region_id);
+#endif
 
+#ifdef GEOPM
+        geopm_prof_region("PHASE_ALPHA_CALC", 0, &region_id);
+        geopm_prof_enter(region_id);
+#endif
       /* alpha = gamma / <s,p> */
       sdotp = (*(pcg_functions->InnerProd))(s, p);
       if ( sdotp==0.0 )
@@ -472,17 +489,46 @@ hypre_PCGSolve( void *pcg_vdata,
       alpha = gamma / sdotp;
 
       gamma_old = gamma;
+#ifdef GEOPM
+        geopm_prof_exit(region_id);
+#endif
 
+#ifdef GEOPM
+        geopm_prof_region("PHASE_DOTPRODUCTS", 0, &region_id);
+        geopm_prof_enter(region_id);
+#endif
       /* x = x + alpha*p */
       (*(pcg_functions->Axpy))(alpha, p, x);
 
       /* r = r - alpha*s */
       (*(pcg_functions->Axpy))(-alpha, s, r);
-         
+#ifdef GEOPM
+        geopm_prof_exit(region_id);
+#endif
+
+#ifdef GEOPM
+        geopm_prof_region("PHASE_CLEARVECTOR", 0, &region_id);
+        geopm_prof_enter(region_id);
+#endif
       /* s = C*r */
       (*(pcg_functions->ClearVector))(s);
+#ifdef GEOPM
+        geopm_prof_exit(region_id);
+#endif
+
+#ifdef GEOPM
+        geopm_prof_region("PHASE_PRECONDITION", 0, &region_id);
+        geopm_prof_enter(region_id);
+#endif
       precond(precond_data, A, r, s);
+#ifdef GEOPM
+        geopm_prof_exit(region_id);
+#endif
 
+#ifdef GEOPM
+        geopm_prof_region("PHASE_RESCALING", 0, &region_id);
+        geopm_prof_enter(region_id);
+#endif
       /* gamma = <r,s> */
       gamma = (*(pcg_functions->InnerProd))(r, s);
 
@@ -491,6 +537,9 @@ hypre_PCGSolve( void *pcg_vdata,
          i_prod = (*(pcg_functions->InnerProd))(r,r);
       else
          i_prod = gamma;
+#ifdef GEOPM
+        geopm_prof_exit(region_id);
+#endif
 
 #if 0
       if (two_norm)
@@ -528,7 +577,10 @@ hypre_PCGSolve( void *pcg_vdata,
          }
       }
 
-
+#ifdef GEOPM
+        geopm_prof_region("PHASE_CONVERGENCE_CHECK", 0, &region_id);
+        geopm_prof_enter(region_id);
+#endif
       /* check for convergence */
       if (i_prod / bi_prod < eps)
       {
@@ -549,6 +601,9 @@ hypre_PCGSolve( void *pcg_vdata,
             break;
          }
       }
+#ifdef GEOPM
+        geopm_prof_exit(region_id);
+#endif
 
       if ( (gamma<1.0e-292) && ((-gamma)<1.0e-292) ) {
          ierr = 1;
@@ -568,6 +623,10 @@ hypre_PCGSolve( void *pcg_vdata,
        * estimate for average convergence factor is available.  
        *--------------------------------------------------------------------*/
 
+#ifdef GEOPM
+        geopm_prof_region("PHASE_MORE", 0, &region_id);
+        geopm_prof_enter(region_id);
+#endif
       if (cf_tol > 0.0)
       {
          cf_ave_0 = cf_ave_1;
@@ -597,6 +656,9 @@ hypre_PCGSolve( void *pcg_vdata,
       /* p = s + beta p */
       (*(pcg_functions->ScaleVector))(beta, p);   
       (*(pcg_functions->Axpy))(1.0, s, p);
+#ifdef GEOPM
+        geopm_prof_exit(region_id);
+#endif
    }
 
    if ( print_level > 1 && my_id==0 )  /* formerly for par_csr only */
-- 
1.9.1

